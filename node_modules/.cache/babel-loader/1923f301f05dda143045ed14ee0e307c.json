{"ast":null,"code":"import sync, { cancelSync, flushSync } from 'framesync';\nimport { mix } from 'popmotion';\nimport { animate } from '../../animation/animate.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEquals, isDeltaZero, isCloseTo, aspectRatio } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\n\nconst animationTarget = 1000;\n\nfunction createProjectionNode(_ref) {\n  let {\n    attachResizeListener,\n    defaultParent,\n    measureScroll,\n    checkIsScrollRoot,\n    resetTransform\n  } = _ref;\n  return class ProjectionNode {\n    constructor(elementId) {\n      let latestValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      let parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent();\n\n      /**\n       * A Set containing all this component's children. This is used to iterate\n       * through the children.\n       *\n       * TODO: This could be faster to iterate as a flat array stored on the root node.\n       */\n      this.children = new Set();\n      /**\n       * Options for the node. We use this to configure what kind of layout animations\n       * we should perform (if any).\n       */\n\n      this.options = {};\n      /**\n       * We use this to detect when its safe to shut down part of a projection tree.\n       * We have to keep projecting children for scale correction and relative projection\n       * until all their parents stop performing layout animations.\n       */\n\n      this.isTreeAnimating = false;\n      this.isAnimationBlocked = false;\n      /**\n       * Flag to true if we think this layout has been changed. We can't always know this,\n       * currently we set it to true every time a component renders, or if it has a layoutDependency\n       * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n       * and if one node is dirtied, they all are.\n       */\n\n      this.isLayoutDirty = false;\n      /**\n       * Block layout updates for instant layout transitions throughout the tree.\n       */\n\n      this.updateManuallyBlocked = false;\n      this.updateBlockedByResize = false;\n      /**\n       * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n       * call.\n       */\n\n      this.isUpdating = false;\n      /**\n       * If this is an SVG element we currently disable projection transforms\n       */\n\n      this.isSVG = false;\n      /**\n       * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n       * its projection styles.\n       */\n\n      this.needsReset = false;\n      /**\n       * Flags whether this node should have its transform reset prior to measuring.\n       */\n\n      this.shouldResetTransform = false;\n      /**\n       * An object representing the calculated contextual/accumulated/tree scale.\n       * This will be used to scale calculcated projection transforms, as these are\n       * calculated in screen-space but need to be scaled for elements to layoutly\n       * make it to their calculated destinations.\n       *\n       * TODO: Lazy-init\n       */\n\n      this.treeScale = {\n        x: 1,\n        y: 1\n      };\n      /**\n       *\n       */\n\n      this.eventHandlers = new Map(); // Note: Currently only running on root node\n\n      this.potentialNodes = new Map();\n\n      this.checkUpdateFailed = () => {\n        if (this.isUpdating) {\n          this.isUpdating = false;\n          this.clearAllSnapshots();\n        }\n      };\n\n      this.updateProjection = () => {\n        this.nodes.forEach(resolveTargetDelta);\n        this.nodes.forEach(calcProjection);\n      };\n\n      this.hasProjected = false;\n      this.isVisible = true;\n      this.animationProgress = 0;\n      /**\n       * Shared layout\n       */\n      // TODO Only running on root node\n\n      this.sharedNodes = new Map();\n      this.elementId = elementId;\n      this.latestValues = latestValues;\n      this.root = parent ? parent.root || parent : this;\n      this.path = parent ? [...parent.path, parent] : [];\n      this.parent = parent;\n      this.depth = parent ? parent.depth + 1 : 0;\n      elementId && this.root.registerPotentialNode(elementId, this);\n\n      for (let i = 0; i < this.path.length; i++) {\n        this.path[i].shouldResetTransform = true;\n      }\n\n      if (this.root === this) this.nodes = new FlatTree();\n    }\n\n    addEventListener(name, handler) {\n      if (!this.eventHandlers.has(name)) {\n        this.eventHandlers.set(name, new SubscriptionManager());\n      }\n\n      return this.eventHandlers.get(name).add(handler);\n    }\n\n    notifyListeners(name) {\n      const subscriptionManager = this.eventHandlers.get(name);\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      subscriptionManager === null || subscriptionManager === void 0 ? void 0 : subscriptionManager.notify(...args);\n    }\n\n    hasListeners(name) {\n      return this.eventHandlers.has(name);\n    }\n\n    registerPotentialNode(id, node) {\n      this.potentialNodes.set(id, node);\n    }\n    /**\n     * Lifecycles\n     */\n\n\n    mount(instance) {\n      let isLayoutDirty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      var _a;\n\n      if (this.instance) return;\n      this.isSVG = instance instanceof SVGElement && instance.tagName !== \"svg\";\n      this.instance = instance;\n      const {\n        layoutId,\n        layout,\n        visualElement\n      } = this.options;\n\n      if (visualElement && !visualElement.current) {\n        visualElement.mount(instance);\n      }\n\n      this.root.nodes.add(this);\n      (_a = this.parent) === null || _a === void 0 ? void 0 : _a.children.add(this);\n      this.elementId && this.root.potentialNodes.delete(this.elementId);\n\n      if (isLayoutDirty && (layout || layoutId)) {\n        this.isLayoutDirty = true;\n      }\n\n      if (attachResizeListener) {\n        let cancelDelay;\n\n        const resizeUnblockUpdate = () => this.root.updateBlockedByResize = false;\n\n        attachResizeListener(instance, () => {\n          this.root.updateBlockedByResize = true;\n          cancelDelay && cancelDelay();\n          cancelDelay = delay(resizeUnblockUpdate, 250);\n\n          if (globalProjectionState.hasAnimatedSinceResize) {\n            globalProjectionState.hasAnimatedSinceResize = false;\n            this.nodes.forEach(finishAnimation);\n          }\n        });\n      }\n\n      if (layoutId) {\n        this.root.registerSharedNode(layoutId, this);\n      } // Only register the handler if it requires layout animation\n\n\n      if (this.options.animate !== false && visualElement && (layoutId || layout)) {\n        this.addEventListener(\"didUpdate\", _ref2 => {\n          let {\n            delta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n            layout: newLayout\n          } = _ref2;\n\n          var _a, _b, _c, _d, _e;\n\n          if (this.isTreeAnimationBlocked()) {\n            this.target = undefined;\n            this.relativeTarget = undefined;\n            return;\n          } // TODO: Check here if an animation exists\n\n\n          const layoutTransition = (_b = (_a = this.options.transition) !== null && _a !== void 0 ? _a : visualElement.getDefaultTransition()) !== null && _b !== void 0 ? _b : defaultLayoutTransition;\n          const {\n            onLayoutAnimationStart,\n            onLayoutAnimationComplete\n          } = visualElement.getProps();\n          /**\n           * The target layout of the element might stay the same,\n           * but its position relative to its parent has changed.\n           */\n\n          const targetChanged = !this.targetLayout || !boxEquals(this.targetLayout, newLayout) || hasRelativeTargetChanged;\n          /**\n           * If the layout hasn't seemed to have changed, it might be that the\n           * element is visually in the same place in the document but its position\n           * relative to its parent has indeed changed. So here we check for that.\n           */\n\n          const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n\n          if (((_c = this.resumeFrom) === null || _c === void 0 ? void 0 : _c.instance) || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !this.currentAnimation)) {\n            if (this.resumeFrom) {\n              this.resumingFrom = this.resumeFrom;\n              this.resumingFrom.resumingFrom = undefined;\n            }\n\n            this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n            const animationOptions = { ...getValueTransition(layoutTransition, \"layout\"),\n              onPlay: onLayoutAnimationStart,\n              onComplete: onLayoutAnimationComplete\n            };\n\n            if (visualElement.shouldReduceMotion) {\n              animationOptions.delay = 0;\n              animationOptions.type = false;\n            }\n\n            this.startAnimation(animationOptions);\n          } else {\n            /**\n             * If the layout hasn't changed and we have an animation that hasn't started yet,\n             * finish it immediately. Otherwise it will be animating from a location\n             * that was probably never commited to screen and look like a jumpy box.\n             */\n            if (!hasLayoutChanged && this.animationProgress === 0) {\n              finishAnimation(this);\n            }\n\n            this.isLead() && ((_e = (_d = this.options).onExitComplete) === null || _e === void 0 ? void 0 : _e.call(_d));\n          }\n\n          this.targetLayout = newLayout;\n        });\n      }\n    }\n\n    unmount() {\n      var _a, _b;\n\n      this.options.layoutId && this.willUpdate();\n      this.root.nodes.remove(this);\n      (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.remove(this);\n      (_b = this.parent) === null || _b === void 0 ? void 0 : _b.children.delete(this);\n      this.instance = undefined;\n      cancelSync.preRender(this.updateProjection);\n    } // only on the root\n\n\n    blockUpdate() {\n      this.updateManuallyBlocked = true;\n    }\n\n    unblockUpdate() {\n      this.updateManuallyBlocked = false;\n    }\n\n    isUpdateBlocked() {\n      return this.updateManuallyBlocked || this.updateBlockedByResize;\n    }\n\n    isTreeAnimationBlocked() {\n      var _a;\n\n      return this.isAnimationBlocked || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimationBlocked()) || false;\n    } // Note: currently only running on root node\n\n\n    startUpdate() {\n      var _a;\n\n      if (this.isUpdateBlocked()) return;\n      this.isUpdating = true;\n      (_a = this.nodes) === null || _a === void 0 ? void 0 : _a.forEach(resetRotation);\n    }\n\n    willUpdate() {\n      let shouldNotifyListeners = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      var _a, _b, _c;\n\n      if (this.root.isUpdateBlocked()) {\n        (_b = (_a = this.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n        return;\n      }\n\n      !this.root.isUpdating && this.root.startUpdate();\n      if (this.isLayoutDirty) return;\n      this.isLayoutDirty = true;\n\n      for (let i = 0; i < this.path.length; i++) {\n        const node = this.path[i];\n        node.shouldResetTransform = true;\n        /**\n         * TODO: Check we haven't updated the scroll\n         * since the last didUpdate\n         */\n\n        node.updateScroll();\n      }\n\n      const {\n        layoutId,\n        layout\n      } = this.options;\n      if (layoutId === undefined && !layout) return;\n      const transformTemplate = (_c = this.options.visualElement) === null || _c === void 0 ? void 0 : _c.getProps().transformTemplate;\n      this.prevTransformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n      this.updateSnapshot();\n      shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n    } // Note: Currently only running on root node\n\n\n    didUpdate() {\n      const updateWasBlocked = this.isUpdateBlocked(); // When doing an instant transition, we skip the layout update,\n      // but should still clean up the measurements so that the next\n      // snapshot could be taken correctly.\n\n      if (updateWasBlocked) {\n        this.unblockUpdate();\n        this.clearAllSnapshots();\n        this.nodes.forEach(clearMeasurements);\n        return;\n      }\n\n      if (!this.isUpdating) return;\n      this.isUpdating = false;\n      /**\n       * Search for and mount newly-added projection elements.\n       *\n       * TODO: Every time a new component is rendered we could search up the tree for\n       * the closest mounted node and query from there rather than document.\n       */\n\n      if (this.potentialNodes.size) {\n        this.potentialNodes.forEach(mountNodeEarly);\n        this.potentialNodes.clear();\n      }\n      /**\n       * Write\n       */\n\n\n      this.nodes.forEach(resetTransformStyle);\n      /**\n       * Read ==================\n       */\n      // Update layout measurements of updated children\n\n      this.nodes.forEach(updateLayout);\n      /**\n       * Write\n       */\n      // Notify listeners that the layout is updated\n\n      this.nodes.forEach(notifyLayoutUpdate);\n      this.clearAllSnapshots(); // Flush any scheduled updates\n\n      flushSync.update();\n      flushSync.preRender();\n      flushSync.render();\n    }\n\n    clearAllSnapshots() {\n      this.nodes.forEach(clearSnapshot);\n      this.sharedNodes.forEach(removeLeadSnapshots);\n    }\n\n    scheduleUpdateProjection() {\n      sync.preRender(this.updateProjection, false, true);\n    }\n\n    scheduleCheckAfterUnmount() {\n      /**\n       * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n       * we manually call didUpdate to give a chance to the siblings to animate.\n       * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n       */\n      sync.postRender(() => {\n        if (this.isLayoutDirty) {\n          this.root.didUpdate();\n        } else {\n          this.root.checkUpdateFailed();\n        }\n      });\n    }\n    /**\n     * Update measurements\n     */\n\n\n    updateSnapshot() {\n      if (this.snapshot || !this.instance) return;\n      this.snapshot = this.measure();\n    }\n\n    updateLayout() {\n      var _a;\n\n      if (!this.instance) return; // TODO: Incorporate into a forwarded scroll offset\n\n      this.updateScroll();\n\n      if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {\n        return;\n      }\n      /**\n       * When a node is mounted, it simply resumes from the prevLead's\n       * snapshot instead of taking a new one, but the ancestors scroll\n       * might have updated while the prevLead is unmounted. We need to\n       * update the scroll again to make sure the layout we measure is\n       * up to date.\n       */\n\n\n      if (this.resumeFrom && !this.resumeFrom.instance) {\n        for (let i = 0; i < this.path.length; i++) {\n          const node = this.path[i];\n          node.updateScroll();\n        }\n      }\n\n      const prevLayout = this.layout;\n      this.layout = this.measure(false);\n      this.layoutCorrected = createBox();\n      this.isLayoutDirty = false;\n      this.projectionDelta = undefined;\n      this.notifyListeners(\"measure\", this.layout.layoutBox);\n      (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout === null || prevLayout === void 0 ? void 0 : prevLayout.layoutBox);\n    }\n\n    updateScroll() {\n      if (this.options.layoutScroll && this.instance) {\n        this.isScrollRoot = checkIsScrollRoot(this.instance);\n        this.scroll = measureScroll(this.instance);\n      }\n    }\n\n    resetTransform() {\n      var _a;\n\n      if (!resetTransform) return;\n      const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n      const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n      const transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n      const transformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n      const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n\n      if (isResetRequested && (hasProjection || hasTransform(this.latestValues) || transformTemplateHasChanged)) {\n        resetTransform(this.instance, transformTemplateValue);\n        this.shouldResetTransform = false;\n        this.scheduleRender();\n      }\n    }\n\n    measure() {\n      let removeTransform = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      const pageBox = this.measurePageBox();\n      let layoutBox = this.removeElementScroll(pageBox);\n      /**\n       * Measurements taken during the pre-render stage\n       * still have transforms applied so we remove them\n       * via calculation.\n       */\n\n      if (removeTransform) {\n        layoutBox = this.removeTransform(layoutBox);\n      }\n\n      roundBox(layoutBox);\n      return {\n        measuredBox: pageBox,\n        layoutBox,\n        latestValues: {}\n      };\n    }\n\n    measurePageBox() {\n      const {\n        visualElement\n      } = this.options;\n      if (!visualElement) return createBox();\n      const box = visualElement.measureViewportBox(); // Remove viewport scroll to give page-relative coordinates\n\n      const {\n        scroll\n      } = this.root;\n\n      if (scroll) {\n        translateAxis(box.x, scroll.x);\n        translateAxis(box.y, scroll.y);\n      }\n\n      return box;\n    }\n\n    removeElementScroll(box) {\n      const boxWithoutScroll = createBox();\n      copyBoxInto(boxWithoutScroll, box);\n      /**\n       * Performance TODO: Keep a cumulative scroll offset down the tree\n       * rather than loop back up the path.\n       */\n\n      for (let i = 0; i < this.path.length; i++) {\n        const node = this.path[i];\n        const {\n          scroll,\n          options,\n          isScrollRoot\n        } = node;\n\n        if (node !== this.root && scroll && options.layoutScroll) {\n          /**\n           * If this is a new scroll root, we want to remove all previous scrolls\n           * from the viewport box.\n           */\n          if (isScrollRoot) {\n            copyBoxInto(boxWithoutScroll, box);\n            const {\n              scroll: rootScroll\n            } = this.root;\n            /**\n             * Undo the application of page scroll that was originally added\n             * to the measured bounding box.\n             */\n\n            if (rootScroll) {\n              translateAxis(boxWithoutScroll.x, -rootScroll.x);\n              translateAxis(boxWithoutScroll.y, -rootScroll.y);\n            }\n          }\n\n          translateAxis(boxWithoutScroll.x, scroll.x);\n          translateAxis(boxWithoutScroll.y, scroll.y);\n        }\n      }\n\n      return boxWithoutScroll;\n    }\n\n    applyTransform(box) {\n      let transformOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      const withTransforms = createBox();\n      copyBoxInto(withTransforms, box);\n\n      for (let i = 0; i < this.path.length; i++) {\n        const node = this.path[i];\n\n        if (!transformOnly && node.options.layoutScroll && node.scroll && node !== node.root) {\n          transformBox(withTransforms, {\n            x: -node.scroll.x,\n            y: -node.scroll.y\n          });\n        }\n\n        if (!hasTransform(node.latestValues)) continue;\n        transformBox(withTransforms, node.latestValues);\n      }\n\n      if (hasTransform(this.latestValues)) {\n        transformBox(withTransforms, this.latestValues);\n      }\n\n      return withTransforms;\n    }\n\n    removeTransform(box) {\n      var _a;\n\n      const boxWithoutTransform = createBox();\n      copyBoxInto(boxWithoutTransform, box);\n\n      for (let i = 0; i < this.path.length; i++) {\n        const node = this.path[i];\n        if (!node.instance) continue;\n        if (!hasTransform(node.latestValues)) continue;\n        hasScale(node.latestValues) && node.updateSnapshot();\n        const sourceBox = createBox();\n        const nodeBox = node.measurePageBox();\n        copyBoxInto(sourceBox, nodeBox);\n        removeBoxTransforms(boxWithoutTransform, node.latestValues, (_a = node.snapshot) === null || _a === void 0 ? void 0 : _a.layoutBox, sourceBox);\n      }\n\n      if (hasTransform(this.latestValues)) {\n        removeBoxTransforms(boxWithoutTransform, this.latestValues);\n      }\n\n      return boxWithoutTransform;\n    }\n    /**\n     *\n     */\n\n\n    setTargetDelta(delta) {\n      this.targetDelta = delta;\n      this.root.scheduleUpdateProjection();\n    }\n\n    setOptions(options) {\n      this.options = { ...this.options,\n        ...options,\n        crossfade: options.crossfade !== undefined ? options.crossfade : true\n      };\n    }\n\n    clearMeasurements() {\n      this.scroll = undefined;\n      this.layout = undefined;\n      this.snapshot = undefined;\n      this.prevTransformTemplateValue = undefined;\n      this.targetDelta = undefined;\n      this.target = undefined;\n      this.isLayoutDirty = false;\n    }\n    /**\n     * Frame calculations\n     */\n\n\n    resolveTargetDelta() {\n      var _a;\n\n      const {\n        layout,\n        layoutId\n      } = this.options;\n      /**\n       * If we have no layout, we can't perform projection, so early return\n       */\n\n      if (!this.layout || !(layout || layoutId)) return;\n      /**\n       * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n       * a relativeParent. This will allow a component to perform scale correction\n       * even if no animation has started.\n       */\n      // TODO If this is unsuccessful this currently happens every frame\n\n      if (!this.targetDelta && !this.relativeTarget) {\n        // TODO: This is a semi-repetition of further down this function, make DRY\n        const relativeParent = this.getClosestProjectingParent();\n\n        if (relativeParent && relativeParent.layout) {\n          this.relativeParent = relativeParent;\n          this.relativeTarget = createBox();\n          this.relativeTargetOrigin = createBox();\n          calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n        } else {\n          this.relativeParent = this.relativeTarget = undefined;\n        }\n      }\n      /**\n       * If we have no relative target or no target delta our target isn't valid\n       * for this frame.\n       */\n\n\n      if (!this.relativeTarget && !this.targetDelta) return;\n      /**\n       * Lazy-init target data structure\n       */\n\n      if (!this.target) {\n        this.target = createBox();\n        this.targetWithTransforms = createBox();\n      }\n      /**\n       * If we've got a relative box for this component, resolve it into a target relative to the parent.\n       */\n\n\n      if (this.relativeTarget && this.relativeTargetOrigin && ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.target)) {\n        calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n        /**\n         * If we've only got a targetDelta, resolve it into a target\n         */\n      } else if (this.targetDelta) {\n        if (Boolean(this.resumingFrom)) {\n          // TODO: This is creating a new object every frame\n          this.target = this.applyTransform(this.layout.layoutBox);\n        } else {\n          copyBoxInto(this.target, this.layout.layoutBox);\n        }\n\n        applyBoxDelta(this.target, this.targetDelta);\n      } else {\n        /**\n         * If no target, use own layout as target\n         */\n        copyBoxInto(this.target, this.layout.layoutBox);\n      }\n      /**\n       * If we've been told to attempt to resolve a relative target, do so.\n       */\n\n\n      if (this.attemptToResolveRelativeTarget) {\n        this.attemptToResolveRelativeTarget = false;\n        const relativeParent = this.getClosestProjectingParent();\n\n        if (relativeParent && Boolean(relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !relativeParent.options.layoutScroll && relativeParent.target) {\n          this.relativeParent = relativeParent;\n          this.relativeTarget = createBox();\n          this.relativeTargetOrigin = createBox();\n          calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n        } else {\n          this.relativeParent = this.relativeTarget = undefined;\n        }\n      }\n    }\n\n    getClosestProjectingParent() {\n      if (!this.parent || hasScale(this.parent.latestValues) || has2DTranslate(this.parent.latestValues)) return undefined;\n\n      if ((this.parent.relativeTarget || this.parent.targetDelta) && this.parent.layout) {\n        return this.parent;\n      } else {\n        return this.parent.getClosestProjectingParent();\n      }\n    }\n\n    calcProjection() {\n      var _a;\n\n      const {\n        layout,\n        layoutId\n      } = this.options;\n      /**\n       * If this section of the tree isn't animating we can\n       * delete our target sources for the following frame.\n       */\n\n      this.isTreeAnimating = Boolean(((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimating) || this.currentAnimation || this.pendingAnimation);\n\n      if (!this.isTreeAnimating) {\n        this.targetDelta = this.relativeTarget = undefined;\n      }\n\n      if (!this.layout || !(layout || layoutId)) return;\n      const lead = this.getLead();\n      /**\n       * Reset the corrected box with the latest values from box, as we're then going\n       * to perform mutative operations on it.\n       */\n\n      copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n      /**\n       * Apply all the parent deltas to this box to produce the corrected box. This\n       * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n       */\n\n      applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, Boolean(this.resumingFrom) || this !== lead);\n      const {\n        target\n      } = lead;\n      if (!target) return;\n\n      if (!this.projectionDelta) {\n        this.projectionDelta = createDelta();\n        this.projectionDeltaWithTransform = createDelta();\n      }\n\n      const prevTreeScaleX = this.treeScale.x;\n      const prevTreeScaleY = this.treeScale.y;\n      const prevProjectionTransform = this.projectionTransform;\n      /**\n       * Update the delta between the corrected box and the target box before user-set transforms were applied.\n       * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n       * for our layout reprojection, but still allow them to be scaled correctly by the user.\n       * It might be that to simplify this we may want to accept that user-set scale is also corrected\n       * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n       * to allow people to choose whether these styles are corrected based on just the\n       * layout reprojection or the final bounding box.\n       */\n\n      calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n      this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n\n      if (this.projectionTransform !== prevProjectionTransform || this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY) {\n        this.hasProjected = true;\n        this.scheduleRender();\n        this.notifyListeners(\"projectionUpdate\", target);\n      }\n    }\n\n    hide() {\n      this.isVisible = false; // TODO: Schedule render\n    }\n\n    show() {\n      this.isVisible = true; // TODO: Schedule render\n    }\n\n    scheduleRender() {\n      let notifyAll = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      var _a, _b, _c;\n\n      (_b = (_a = this.options).scheduleRender) === null || _b === void 0 ? void 0 : _b.call(_a);\n      notifyAll && ((_c = this.getStack()) === null || _c === void 0 ? void 0 : _c.scheduleRender());\n\n      if (this.resumingFrom && !this.resumingFrom.instance) {\n        this.resumingFrom = undefined;\n      }\n    }\n\n    setAnimationOrigin(delta) {\n      let hasOnlyRelativeTargetChanged = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      var _a;\n\n      const snapshot = this.snapshot;\n      const snapshotLatestValues = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.latestValues) || {};\n      const mixedValues = { ...this.latestValues\n      };\n      const targetDelta = createDelta();\n      this.relativeTarget = this.relativeTargetOrigin = undefined;\n      this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n      const relativeLayout = createBox();\n      const isSharedLayoutAnimation = snapshot === null || snapshot === void 0 ? void 0 : snapshot.isShared;\n      const isOnlyMember = (((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.members.length) || 0) <= 1;\n      const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));\n      this.animationProgress = 0;\n\n      this.mixTargetDelta = latest => {\n        var _a;\n\n        const progress = latest / 1000;\n        mixAxisDelta(targetDelta.x, delta.x, progress);\n        mixAxisDelta(targetDelta.y, delta.y, progress);\n        this.setTargetDelta(targetDelta);\n\n        if (this.relativeTarget && this.relativeTargetOrigin && this.layout && ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.layout)) {\n          calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n          mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n        }\n\n        if (isSharedLayoutAnimation) {\n          this.animationValues = mixedValues;\n          mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n        }\n\n        this.root.scheduleUpdateProjection();\n        this.scheduleRender();\n        this.animationProgress = progress;\n      };\n\n      this.mixTargetDelta(0);\n    }\n\n    startAnimation(options) {\n      var _a, _b;\n\n      this.notifyListeners(\"animationStart\");\n      (_a = this.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n\n      if (this.resumingFrom) {\n        (_b = this.resumingFrom.currentAnimation) === null || _b === void 0 ? void 0 : _b.stop();\n      }\n\n      if (this.pendingAnimation) {\n        cancelSync.update(this.pendingAnimation);\n        this.pendingAnimation = undefined;\n      }\n      /**\n       * Start the animation in the next frame to have a frame with progress 0,\n       * where the target is the same as when the animation started, so we can\n       * calculate the relative positions correctly for instant transitions.\n       */\n\n\n      this.pendingAnimation = sync.update(() => {\n        globalProjectionState.hasAnimatedSinceResize = true;\n        this.currentAnimation = animate(0, animationTarget, { ...options,\n          onUpdate: latest => {\n            var _a;\n\n            this.mixTargetDelta(latest);\n            (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, latest);\n          },\n          onComplete: () => {\n            var _a;\n\n            (_a = options.onComplete) === null || _a === void 0 ? void 0 : _a.call(options);\n            this.completeAnimation();\n          }\n        });\n\n        if (this.resumingFrom) {\n          this.resumingFrom.currentAnimation = this.currentAnimation;\n        }\n\n        this.pendingAnimation = undefined;\n      });\n    }\n\n    completeAnimation() {\n      var _a;\n\n      if (this.resumingFrom) {\n        this.resumingFrom.currentAnimation = undefined;\n        this.resumingFrom.preserveOpacity = undefined;\n      }\n\n      (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.exitAnimationComplete();\n      this.resumingFrom = this.currentAnimation = this.animationValues = undefined;\n      this.notifyListeners(\"animationComplete\");\n    }\n\n    finishAnimation() {\n      var _a;\n\n      if (this.currentAnimation) {\n        (_a = this.mixTargetDelta) === null || _a === void 0 ? void 0 : _a.call(this, animationTarget);\n        this.currentAnimation.stop();\n      }\n\n      this.completeAnimation();\n    }\n\n    applyTransformsToTarget() {\n      const lead = this.getLead();\n      let {\n        targetWithTransforms,\n        target,\n        layout,\n        latestValues\n      } = lead;\n      if (!targetWithTransforms || !target || !layout) return;\n      /**\n       * If we're only animating position, and this element isn't the lead element,\n       * then instead of projecting into the lead box we instead want to calculate\n       * a new target that aligns the two boxes but maintains the layout shape.\n       */\n\n      if (this !== lead && this.layout && layout && shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n        target = this.target || createBox();\n        const xLength = calcLength(this.layout.layoutBox.x);\n        target.x.min = lead.target.x.min;\n        target.x.max = target.x.min + xLength;\n        const yLength = calcLength(this.layout.layoutBox.y);\n        target.y.min = lead.target.y.min;\n        target.y.max = target.y.min + yLength;\n      }\n\n      copyBoxInto(targetWithTransforms, target);\n      /**\n       * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n       * This is the final box that we will then project into by calculating a transform delta and\n       * applying it to the corrected box.\n       */\n\n      transformBox(targetWithTransforms, latestValues);\n      /**\n       * Update the delta between the corrected box and the final target box, after\n       * user-set transforms are applied to it. This will be used by the renderer to\n       * create a transform style that will reproject the element from its layout layout\n       * into the desired bounding box.\n       */\n\n      calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n    }\n\n    registerSharedNode(layoutId, node) {\n      var _a, _b, _c;\n\n      if (!this.sharedNodes.has(layoutId)) {\n        this.sharedNodes.set(layoutId, new NodeStack());\n      }\n\n      const stack = this.sharedNodes.get(layoutId);\n      stack.add(node);\n      node.promote({\n        transition: (_a = node.options.initialPromotionConfig) === null || _a === void 0 ? void 0 : _a.transition,\n        preserveFollowOpacity: (_c = (_b = node.options.initialPromotionConfig) === null || _b === void 0 ? void 0 : _b.shouldPreserveFollowOpacity) === null || _c === void 0 ? void 0 : _c.call(_b, node)\n      });\n    }\n\n    isLead() {\n      const stack = this.getStack();\n      return stack ? stack.lead === this : true;\n    }\n\n    getLead() {\n      var _a;\n\n      const {\n        layoutId\n      } = this.options;\n      return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n    }\n\n    getPrevLead() {\n      var _a;\n\n      const {\n        layoutId\n      } = this.options;\n      return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n    }\n\n    getStack() {\n      const {\n        layoutId\n      } = this.options;\n      if (layoutId) return this.root.sharedNodes.get(layoutId);\n    }\n\n    promote() {\n      let {\n        needsReset,\n        transition,\n        preserveFollowOpacity\n      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      const stack = this.getStack();\n      if (stack) stack.promote(this, preserveFollowOpacity);\n\n      if (needsReset) {\n        this.projectionDelta = undefined;\n        this.needsReset = true;\n      }\n\n      if (transition) this.setOptions({\n        transition\n      });\n    }\n\n    relegate() {\n      const stack = this.getStack();\n\n      if (stack) {\n        return stack.relegate(this);\n      } else {\n        return false;\n      }\n    }\n\n    resetRotation() {\n      const {\n        visualElement\n      } = this.options;\n      if (!visualElement) return; // If there's no detected rotation values, we can early return without a forced render.\n\n      let hasRotate = false; // Keep a record of all the values we've reset\n\n      const resetValues = {}; // Check the rotate value of all axes and reset to 0\n\n      for (let i = 0; i < transformAxes.length; i++) {\n        const axis = transformAxes[i];\n        const key = \"rotate\" + axis; // If this rotation doesn't exist as a motion value, then we don't\n        // need to reset it\n\n        if (!visualElement.getStaticValue(key)) {\n          continue;\n        }\n\n        hasRotate = true; // Record the rotation and then temporarily set it to 0\n\n        resetValues[key] = visualElement.getStaticValue(key);\n        visualElement.setStaticValue(key, 0);\n      } // If there's no rotation values, we don't need to do any more.\n\n\n      if (!hasRotate) return; // Force a render of this element to apply the transform with all rotations\n      // set to 0.\n\n      visualElement === null || visualElement === void 0 ? void 0 : visualElement.render(); // Put back all the values we reset\n\n      for (const key in resetValues) {\n        visualElement.setStaticValue(key, resetValues[key]);\n      } // Schedule a render for the next frame. This ensures we won't visually\n      // see the element with the reset rotate value applied.\n\n\n      visualElement.scheduleRender();\n    }\n\n    getProjectionStyles() {\n      let styleProp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var _a, _b, _c; // TODO: Return lifecycle-persistent object\n\n\n      const styles = {};\n      if (!this.instance || this.isSVG) return styles;\n\n      if (!this.isVisible) {\n        return {\n          visibility: \"hidden\"\n        };\n      } else {\n        styles.visibility = \"\";\n      }\n\n      const transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n\n      if (this.needsReset) {\n        this.needsReset = false;\n        styles.opacity = \"\";\n        styles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || \"\";\n        styles.transform = transformTemplate ? transformTemplate(this.latestValues, \"\") : \"none\";\n        return styles;\n      }\n\n      const lead = this.getLead();\n\n      if (!this.projectionDelta || !this.layout || !lead.target) {\n        const emptyStyles = {};\n\n        if (this.options.layoutId) {\n          emptyStyles.opacity = this.latestValues.opacity !== undefined ? this.latestValues.opacity : 1;\n          emptyStyles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || \"\";\n        }\n\n        if (this.hasProjected && !hasTransform(this.latestValues)) {\n          emptyStyles.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n          this.hasProjected = false;\n        }\n\n        return emptyStyles;\n      }\n\n      const valuesToRender = lead.animationValues || lead.latestValues;\n      this.applyTransformsToTarget();\n      styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n\n      if (transformTemplate) {\n        styles.transform = transformTemplate(valuesToRender, styles.transform);\n      }\n\n      const {\n        x,\n        y\n      } = this.projectionDelta;\n      styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n\n      if (lead.animationValues) {\n        /**\n         * If the lead component is animating, assign this either the entering/leaving\n         * opacity\n         */\n        styles.opacity = lead === this ? (_c = (_b = valuesToRender.opacity) !== null && _b !== void 0 ? _b : this.latestValues.opacity) !== null && _c !== void 0 ? _c : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;\n      } else {\n        /**\n         * Or we're not animating at all, set the lead component to its layout\n         * opacity and other components to hidden.\n         */\n        styles.opacity = lead === this ? valuesToRender.opacity !== undefined ? valuesToRender.opacity : \"\" : valuesToRender.opacityExit !== undefined ? valuesToRender.opacityExit : 0;\n      }\n      /**\n       * Apply scale correction\n       */\n\n\n      for (const key in scaleCorrectors) {\n        if (valuesToRender[key] === undefined) continue;\n        const {\n          correct,\n          applyTo\n        } = scaleCorrectors[key];\n        const corrected = correct(valuesToRender[key], lead);\n\n        if (applyTo) {\n          const num = applyTo.length;\n\n          for (let i = 0; i < num; i++) {\n            styles[applyTo[i]] = corrected;\n          }\n        } else {\n          styles[key] = corrected;\n        }\n      }\n      /**\n       * Disable pointer events on follow components. This is to ensure\n       * that if a follow component covers a lead component it doesn't block\n       * pointer events on the lead.\n       */\n\n\n      if (this.options.layoutId) {\n        styles.pointerEvents = lead === this ? resolveMotionValue(styleProp.pointerEvents) || \"\" : \"none\";\n      }\n\n      return styles;\n    }\n\n    clearSnapshot() {\n      this.resumeFrom = this.snapshot = undefined;\n    } // Only run on root\n\n\n    resetTree() {\n      this.root.nodes.forEach(node => {\n        var _a;\n\n        return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n      });\n      this.root.nodes.forEach(clearMeasurements);\n      this.root.sharedNodes.clear();\n    }\n\n  };\n}\n\nfunction updateLayout(node) {\n  node.updateLayout();\n}\n\nfunction notifyLayoutUpdate(node) {\n  var _a, _b, _c;\n\n  const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n\n  if (node.isLead() && node.layout && snapshot && node.hasListeners(\"didUpdate\")) {\n    const {\n      layoutBox: layout,\n      measuredBox: measuredLayout\n    } = node.layout;\n    const {\n      animationType\n    } = node.options; // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n    // animations for instance if layout=\"size\" and an element has only changed position\n\n    if (animationType === \"size\") {\n      eachAxis(axis => {\n        const axisSnapshot = snapshot.isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];\n        const length = calcLength(axisSnapshot);\n        axisSnapshot.min = layout[axis].min;\n        axisSnapshot.max = axisSnapshot.min + length;\n      });\n    } else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n      eachAxis(axis => {\n        const axisSnapshot = snapshot.isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];\n        const length = calcLength(layout[axis]);\n        axisSnapshot.max = axisSnapshot.min + length;\n      });\n    }\n\n    const layoutDelta = createDelta();\n    calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n    const visualDelta = createDelta();\n\n    if (snapshot.isShared) {\n      calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n    } else {\n      calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n    }\n\n    const hasLayoutChanged = !isDeltaZero(layoutDelta);\n    let hasRelativeTargetChanged = false;\n\n    if (!node.resumeFrom) {\n      const relativeParent = node.getClosestProjectingParent();\n      /**\n       * If the relativeParent is itself resuming from a different element then\n       * the relative snapshot is not relavent\n       */\n\n      if (relativeParent && !relativeParent.resumeFrom) {\n        const {\n          snapshot: parentSnapshot,\n          layout: parentLayout\n        } = relativeParent;\n\n        if (parentSnapshot && parentLayout) {\n          const relativeSnapshot = createBox();\n          calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n          const relativeLayout = createBox();\n          calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n\n          if (!boxEquals(relativeSnapshot, relativeLayout)) {\n            hasRelativeTargetChanged = true;\n          }\n        }\n      }\n    }\n\n    node.notifyListeners(\"didUpdate\", {\n      layout,\n      snapshot,\n      delta: visualDelta,\n      layoutDelta,\n      hasLayoutChanged,\n      hasRelativeTargetChanged\n    });\n  } else if (node.isLead()) {\n    (_c = (_b = node.options).onExitComplete) === null || _c === void 0 ? void 0 : _c.call(_b);\n  }\n  /**\n   * Clearing transition\n   * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n   * and why we need it at all\n   */\n\n\n  node.options.transition = undefined;\n}\n\nfunction clearSnapshot(node) {\n  node.clearSnapshot();\n}\n\nfunction clearMeasurements(node) {\n  node.clearMeasurements();\n}\n\nfunction resetTransformStyle(node) {\n  const {\n    visualElement\n  } = node.options;\n\n  if (visualElement === null || visualElement === void 0 ? void 0 : visualElement.getProps().onBeforeLayoutMeasure) {\n    visualElement.notify(\"BeforeLayoutMeasure\");\n  }\n\n  node.resetTransform();\n}\n\nfunction finishAnimation(node) {\n  node.finishAnimation();\n  node.targetDelta = node.relativeTarget = node.target = undefined;\n}\n\nfunction resolveTargetDelta(node) {\n  node.resolveTargetDelta();\n}\n\nfunction calcProjection(node) {\n  node.calcProjection();\n}\n\nfunction resetRotation(node) {\n  node.resetRotation();\n}\n\nfunction removeLeadSnapshots(stack) {\n  stack.removeLeadSnapshot();\n}\n\nfunction mixAxisDelta(output, delta, p) {\n  output.translate = mix(delta.translate, 0, p);\n  output.scale = mix(delta.scale, 1, p);\n  output.origin = delta.origin;\n  output.originPoint = delta.originPoint;\n}\n\nfunction mixAxis(output, from, to, p) {\n  output.min = mix(from.min, to.min, p);\n  output.max = mix(from.max, to.max, p);\n}\n\nfunction mixBox(output, from, to, p) {\n  mixAxis(output.x, from.x, to.x, p);\n  mixAxis(output.y, from.y, to.y, p);\n}\n\nfunction hasOpacityCrossfade(node) {\n  return node.animationValues && node.animationValues.opacityExit !== undefined;\n}\n\nconst defaultLayoutTransition = {\n  duration: 0.45,\n  ease: [0.4, 0, 0.1, 1]\n};\n\nfunction mountNodeEarly(node, id) {\n  /**\n   * Rather than searching the DOM from document we can search the\n   * path for the deepest mounted ancestor and search from there\n   */\n  let searchNode = node.root;\n\n  for (let i = node.path.length - 1; i >= 0; i--) {\n    if (Boolean(node.path[i].instance)) {\n      searchNode = node.path[i];\n      break;\n    }\n  }\n\n  const searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n  const element = searchElement.querySelector(`[data-projection-id=\"${id}\"]`);\n  if (element) node.mount(element, true);\n}\n\nfunction roundAxis(axis) {\n  axis.min = Math.round(axis.min);\n  axis.max = Math.round(axis.max);\n}\n\nfunction roundBox(box) {\n  roundAxis(box.x);\n  roundAxis(box.y);\n}\n\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n  return animationType === \"position\" || animationType === \"preserve-aspect\" && !isCloseTo(aspectRatio(snapshot), aspectRatio(layout), 0.2);\n}\n\nexport { createProjectionNode, mixAxis, mixAxisDelta, mixBox };","map":{"version":3,"names":["sync","cancelSync","flushSync","mix","animate","SubscriptionManager","mixValues","copyBoxInto","translateAxis","transformBox","applyBoxDelta","applyTreeDeltas","calcRelativePosition","calcRelativeBox","calcBoxDelta","calcLength","removeBoxTransforms","createBox","createDelta","getValueTransition","boxEquals","isDeltaZero","isCloseTo","aspectRatio","NodeStack","scaleCorrectors","buildProjectionTransform","eachAxis","hasTransform","hasScale","has2DTranslate","FlatTree","resolveMotionValue","globalProjectionState","delay","transformAxes","animationTarget","createProjectionNode","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","ProjectionNode","constructor","elementId","latestValues","parent","children","Set","options","isTreeAnimating","isAnimationBlocked","isLayoutDirty","updateManuallyBlocked","updateBlockedByResize","isUpdating","isSVG","needsReset","shouldResetTransform","treeScale","x","y","eventHandlers","Map","potentialNodes","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","forEach","resolveTargetDelta","calcProjection","hasProjected","isVisible","animationProgress","sharedNodes","root","path","depth","registerPotentialNode","i","length","addEventListener","name","handler","has","set","get","add","notifyListeners","subscriptionManager","args","notify","hasListeners","id","node","mount","instance","_a","SVGElement","tagName","layoutId","layout","visualElement","current","delete","cancelDelay","resizeUnblockUpdate","hasAnimatedSinceResize","finishAnimation","registerSharedNode","delta","hasLayoutChanged","hasRelativeTargetChanged","newLayout","_b","_c","_d","_e","isTreeAnimationBlocked","target","undefined","relativeTarget","layoutTransition","transition","getDefaultTransition","defaultLayoutTransition","onLayoutAnimationStart","onLayoutAnimationComplete","getProps","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","resumeFrom","currentAnimation","resumingFrom","setAnimationOrigin","animationOptions","onPlay","onComplete","shouldReduceMotion","type","startAnimation","isLead","onExitComplete","call","unmount","willUpdate","remove","getStack","preRender","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","resetRotation","shouldNotifyListeners","updateScroll","transformTemplate","prevTransformTemplateValue","updateSnapshot","didUpdate","updateWasBlocked","clearMeasurements","size","mountNodeEarly","clear","resetTransformStyle","updateLayout","notifyLayoutUpdate","update","render","clearSnapshot","removeLeadSnapshots","scheduleUpdateProjection","scheduleCheckAfterUnmount","postRender","snapshot","measure","alwaysMeasureLayout","prevLayout","layoutCorrected","projectionDelta","layoutBox","layoutScroll","isScrollRoot","scroll","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","scheduleRender","removeTransform","pageBox","measurePageBox","removeElementScroll","roundBox","measuredBox","box","measureViewportBox","boxWithoutScroll","rootScroll","applyTransform","transformOnly","withTransforms","boxWithoutTransform","sourceBox","nodeBox","setTargetDelta","targetDelta","setOptions","crossfade","relativeParent","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","Boolean","attemptToResolveRelativeTarget","pendingAnimation","lead","getLead","projectionDeltaWithTransform","prevTreeScaleX","prevTreeScaleY","prevProjectionTransform","projectionTransform","hide","show","notifyAll","snapshotLatestValues","mixedValues","relativeLayout","isSharedLayoutAnimation","isShared","isOnlyMember","members","shouldCrossfadeOpacity","some","hasOpacityCrossfade","mixTargetDelta","latest","progress","mixAxisDelta","mixBox","animationValues","stop","onUpdate","completeAnimation","preserveOpacity","exitAnimationComplete","applyTransformsToTarget","shouldAnimatePositionOnly","animationType","xLength","min","max","yLength","stack","promote","initialPromotionConfig","preserveFollowOpacity","shouldPreserveFollowOpacity","getPrevLead","prevLead","relegate","hasRotate","resetValues","axis","key","getStaticValue","setStaticValue","getProjectionStyles","styleProp","styles","visibility","opacity","pointerEvents","transform","emptyStyles","valuesToRender","transformOrigin","origin","opacityExit","correct","applyTo","corrected","num","resetTree","measuredLayout","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","removeLeadSnapshot","output","p","translate","scale","originPoint","mixAxis","from","to","duration","ease","searchNode","searchElement","document","element","querySelector","roundAxis","Math","round"],"sources":["/Users/ryes/Downloads/AdvReactProj/node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs"],"sourcesContent":["import sync, { cancelSync, flushSync } from 'framesync';\nimport { mix } from 'popmotion';\nimport { animate } from '../../animation/animate.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEquals, isDeltaZero, isCloseTo, aspectRatio } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\n\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(elementId, latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            // Note: Currently only running on root node\n            this.potentialNodes = new Map();\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            this.updateProjection = () => {\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.elementId = elementId;\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            elementId && this.root.registerPotentialNode(elementId, this);\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager === null || subscriptionManager === void 0 ? void 0 : subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        registerPotentialNode(id, node) {\n            this.potentialNodes.set(id, node);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance, isLayoutDirty = false) {\n            var _a;\n            if (this.instance)\n                return;\n            this.isSVG =\n                instance instanceof SVGElement && instance.tagName !== \"svg\";\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            (_a = this.parent) === null || _a === void 0 ? void 0 : _a.children.add(this);\n            this.elementId && this.root.potentialNodes.delete(this.elementId);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {\n                    var _a, _b, _c, _d, _e;\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = (_b = (_a = this.options.transition) !== null && _a !== void 0 ? _a : visualElement.getDefaultTransition()) !== null && _b !== void 0 ? _b : defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const targetChanged = !this.targetLayout ||\n                        !boxEquals(this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (((_c = this.resumeFrom) === null || _c === void 0 ? void 0 : _c.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged &&\n                            this.animationProgress === 0) {\n                            finishAnimation(this);\n                        }\n                        this.isLead() && ((_e = (_d = this.options).onExitComplete) === null || _e === void 0 ? void 0 : _e.call(_d));\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            var _a, _b;\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.remove(this);\n            (_b = this.parent) === null || _b === void 0 ? void 0 : _b.children.delete(this);\n            this.instance = undefined;\n            cancelSync.preRender(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            var _a;\n            return (this.isAnimationBlocked ||\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            var _a;\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            (_a = this.nodes) === null || _a === void 0 ? void 0 : _a.forEach(resetRotation);\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            var _a, _b, _c;\n            if (this.root.isUpdateBlocked()) {\n                (_b = (_a = this.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n                return;\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                /**\n                 * TODO: Check we haven't updated the scroll\n                 * since the last didUpdate\n                 */\n                node.updateScroll();\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = (_c = this.options.visualElement) === null || _c === void 0 ? void 0 : _c.getProps().transformTemplate;\n            this.prevTransformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        // Note: Currently only running on root node\n        didUpdate() {\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating)\n                return;\n            this.isUpdating = false;\n            /**\n             * Search for and mount newly-added projection elements.\n             *\n             * TODO: Every time a new component is rendered we could search up the tree for\n             * the closest mounted node and query from there rather than document.\n             */\n            if (this.potentialNodes.size) {\n                this.potentialNodes.forEach(mountNodeEarly);\n                this.potentialNodes.clear();\n            }\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            // Flush any scheduled updates\n            flushSync.update();\n            flushSync.preRender();\n            flushSync.render();\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            sync.preRender(this.updateProjection, false, true);\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            sync.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n        }\n        updateLayout() {\n            var _a;\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout === null || prevLayout === void 0 ? void 0 : prevLayout.layoutBox);\n        }\n        updateScroll() {\n            if (this.options.layoutScroll && this.instance) {\n                this.isScrollRoot = checkIsScrollRoot(this.instance);\n                this.scroll = measureScroll(this.instance);\n            }\n        }\n        resetTransform() {\n            var _a;\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n            const transformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n            };\n        }\n        measurePageBox() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            const { scroll } = this.root;\n            if (scroll) {\n                translateAxis(box.x, scroll.x);\n                translateAxis(box.y, scroll.y);\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options, isScrollRoot } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (isScrollRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                        const { scroll: rootScroll } = this.root;\n                        /**\n                         * Undo the application of page scroll that was originally added\n                         * to the measured bounding box.\n                         */\n                        if (rootScroll) {\n                            translateAxis(boxWithoutScroll.x, -rootScroll.x);\n                            translateAxis(boxWithoutScroll.y, -rootScroll.y);\n                        }\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.x);\n                    translateAxis(boxWithoutScroll.y, scroll.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.x,\n                        y: -node.scroll.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            var _a;\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, (_a = node.snapshot) === null || _a === void 0 ? void 0 : _a.layoutBox, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        /**\n         *\n         */\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        /**\n         * Frame calculations\n         */\n        resolveTargetDelta() {\n            var _a;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            // TODO If this is unsuccessful this currently happens every frame\n            if (!this.targetDelta && !this.relativeTarget) {\n                // TODO: This is a semi-repetition of further down this function, make DRY\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent && relativeParent.layout) {\n                    this.relativeParent = relativeParent;\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.target)) {\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target) {\n                    this.relativeParent = relativeParent;\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues))\n                return undefined;\n            if ((this.parent.relativeTarget || this.parent.targetDelta) &&\n                this.parent.layout) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        calcProjection() {\n            var _a;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean(((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            const lead = this.getLead();\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, Boolean(this.resumingFrom) || this !== lead);\n            const { target } = lead;\n            if (!target)\n                return;\n            if (!this.projectionDelta) {\n                this.projectionDelta = createDelta();\n                this.projectionDeltaWithTransform = createDelta();\n            }\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            const prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform ||\n                this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            var _a, _b, _c;\n            (_b = (_a = this.options).scheduleRender) === null || _b === void 0 ? void 0 : _b.call(_a);\n            notifyAll && ((_c = this.getStack()) === null || _c === void 0 ? void 0 : _c.scheduleRender());\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            var _a;\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.latestValues) || {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            this.relativeTarget = this.relativeTargetOrigin = undefined;\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const isSharedLayoutAnimation = snapshot === null || snapshot === void 0 ? void 0 : snapshot.isShared;\n            const isOnlyMember = (((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.members.length) || 0) <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            this.mixTargetDelta = (latest) => {\n                var _a;\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.layout)) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(0);\n        }\n        startAnimation(options) {\n            var _a, _b;\n            this.notifyListeners(\"animationStart\");\n            (_a = this.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n            if (this.resumingFrom) {\n                (_b = this.resumingFrom.currentAnimation) === null || _b === void 0 ? void 0 : _b.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelSync.update(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = sync.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = animate(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest) => {\n                        var _a;\n                        this.mixTargetDelta(latest);\n                        (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, latest);\n                    },\n                    onComplete: () => {\n                        var _a;\n                        (_a = options.onComplete) === null || _a === void 0 ? void 0 : _a.call(options);\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            var _a;\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            var _a;\n            if (this.currentAnimation) {\n                (_a = this.mixTargetDelta) === null || _a === void 0 ? void 0 : _a.call(this, animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            var _a, _b, _c;\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            node.promote({\n                transition: (_a = node.options.initialPromotionConfig) === null || _a === void 0 ? void 0 : _a.transition,\n                preserveFollowOpacity: (_c = (_b = node.options.initialPromotionConfig) === null || _b === void 0 ? void 0 : _b.shouldPreserveFollowOpacity) === null || _c === void 0 ? void 0 : _c.call(_b, node),\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected rotation values, we can early return without a forced render.\n            let hasRotate = false;\n            // Keep a record of all the values we've reset\n            const resetValues = {};\n            // Check the rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                const axis = transformAxes[i];\n                const key = \"rotate\" + axis;\n                // If this rotation doesn't exist as a motion value, then we don't\n                // need to reset it\n                if (!visualElement.getStaticValue(key)) {\n                    continue;\n                }\n                hasRotate = true;\n                // Record the rotation and then temporarily set it to 0\n                resetValues[key] = visualElement.getStaticValue(key);\n                visualElement.setStaticValue(key, 0);\n            }\n            // If there's no rotation values, we don't need to do any more.\n            if (!hasRotate)\n                return;\n            // Force a render of this element to apply the transform with all rotations\n            // set to 0.\n            visualElement === null || visualElement === void 0 ? void 0 : visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp = {}) {\n            var _a, _b, _c;\n            // TODO: Return lifecycle-persistent object\n            const styles = {};\n            if (!this.instance || this.isSVG)\n                return styles;\n            if (!this.isVisible) {\n                return { visibility: \"hidden\" };\n            }\n            else {\n                styles.visibility = \"\";\n            }\n            const transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_c = (_b = valuesToRender.opacity) !== null && _b !== void 0 ? _b : this.latestValues.opacity) !== null && _c !== void 0 ? _c : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo } = scaleCorrectors[key];\n                const corrected = correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a, _b, _c;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = snapshot.isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = snapshot.isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (snapshot.isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEquals(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        (_c = (_b = node.options).onExitComplete) === null || _c === void 0 ? void 0 : _c.call(_b);\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement === null || visualElement === void 0 ? void 0 : visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetRotation(node) {\n    node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mix(delta.translate, 0, p);\n    output.scale = mix(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mix(from.min, to.min, p);\n    output.max = mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nfunction mountNodeEarly(node, id) {\n    /**\n     * Rather than searching the DOM from document we can search the\n     * path for the deepest mounted ancestor and search from there\n     */\n    let searchNode = node.root;\n    for (let i = node.path.length - 1; i >= 0; i--) {\n        if (Boolean(node.path[i].instance)) {\n            searchNode = node.path[i];\n            break;\n        }\n    }\n    const searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n    const element = searchElement.querySelector(`[data-projection-id=\"${id}\"]`);\n    if (element)\n        node.mount(element, true);\n}\nfunction roundAxis(axis) {\n    axis.min = Math.round(axis.min);\n    axis.max = Math.round(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isCloseTo(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\n\nexport { createProjectionNode, mixAxis, mixAxisDelta, mixBox };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}