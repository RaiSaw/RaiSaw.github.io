{"ast":null,"code":"import _objectSpread from \"/Users/ryes/Downloads/Files etc/React WS/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"/Users/ryes/Downloads/Files etc/React WS/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/ryes/Downloads/Files etc/React WS/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/ryes/Downloads/Files etc/React WS/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport sync, { cancelSync, flushSync } from 'framesync';\nimport { mix } from 'popmotion';\nimport { animate } from '../../animation/animate.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEquals, isDeltaZero, isCloseTo, aspectRatio } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\nvar transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nvar animationTarget = 1000;\nfunction createProjectionNode(_ref) {\n  var attachResizeListener = _ref.attachResizeListener,\n    defaultParent = _ref.defaultParent,\n    measureScroll = _ref.measureScroll,\n    checkIsScrollRoot = _ref.checkIsScrollRoot,\n    _resetTransform = _ref.resetTransform;\n  return /*#__PURE__*/function () {\n    function ProjectionNode(elementId) {\n      var _this = this;\n      var latestValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent();\n      _classCallCheck(this, ProjectionNode);\n      /**\n       * A Set containing all this component's children. This is used to iterate\n       * through the children.\n       *\n       * TODO: This could be faster to iterate as a flat array stored on the root node.\n       */\n      this.children = new Set();\n      /**\n       * Options for the node. We use this to configure what kind of layout animations\n       * we should perform (if any).\n       */\n      this.options = {};\n      /**\n       * We use this to detect when its safe to shut down part of a projection tree.\n       * We have to keep projecting children for scale correction and relative projection\n       * until all their parents stop performing layout animations.\n       */\n      this.isTreeAnimating = false;\n      this.isAnimationBlocked = false;\n      /**\n       * Flag to true if we think this layout has been changed. We can't always know this,\n       * currently we set it to true every time a component renders, or if it has a layoutDependency\n       * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n       * and if one node is dirtied, they all are.\n       */\n      this.isLayoutDirty = false;\n      /**\n       * Block layout updates for instant layout transitions throughout the tree.\n       */\n      this.updateManuallyBlocked = false;\n      this.updateBlockedByResize = false;\n      /**\n       * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n       * call.\n       */\n      this.isUpdating = false;\n      /**\n       * If this is an SVG element we currently disable projection transforms\n       */\n      this.isSVG = false;\n      /**\n       * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n       * its projection styles.\n       */\n      this.needsReset = false;\n      /**\n       * Flags whether this node should have its transform reset prior to measuring.\n       */\n      this.shouldResetTransform = false;\n      /**\n       * An object representing the calculated contextual/accumulated/tree scale.\n       * This will be used to scale calculcated projection transforms, as these are\n       * calculated in screen-space but need to be scaled for elements to layoutly\n       * make it to their calculated destinations.\n       *\n       * TODO: Lazy-init\n       */\n      this.treeScale = {\n        x: 1,\n        y: 1\n      };\n      /**\n       *\n       */\n      this.eventHandlers = new Map();\n      // Note: Currently only running on root node\n      this.potentialNodes = new Map();\n      this.checkUpdateFailed = function () {\n        if (_this.isUpdating) {\n          _this.isUpdating = false;\n          _this.clearAllSnapshots();\n        }\n      };\n      this.updateProjection = function () {\n        _this.nodes.forEach(resolveTargetDelta);\n        _this.nodes.forEach(calcProjection);\n      };\n      this.hasProjected = false;\n      this.isVisible = true;\n      this.animationProgress = 0;\n      /**\n       * Shared layout\n       */\n      // TODO Only running on root node\n      this.sharedNodes = new Map();\n      this.elementId = elementId;\n      this.latestValues = latestValues;\n      this.root = parent ? parent.root || parent : this;\n      this.path = parent ? [].concat(_toConsumableArray(parent.path), [parent]) : [];\n      this.parent = parent;\n      this.depth = parent ? parent.depth + 1 : 0;\n      elementId && this.root.registerPotentialNode(elementId, this);\n      for (var i = 0; i < this.path.length; i++) {\n        this.path[i].shouldResetTransform = true;\n      }\n      if (this.root === this) this.nodes = new FlatTree();\n    }\n    _createClass(ProjectionNode, [{\n      key: \"addEventListener\",\n      value: function addEventListener(name, handler) {\n        if (!this.eventHandlers.has(name)) {\n          this.eventHandlers.set(name, new SubscriptionManager());\n        }\n        return this.eventHandlers.get(name).add(handler);\n      }\n    }, {\n      key: \"notifyListeners\",\n      value: function notifyListeners(name) {\n        var subscriptionManager = this.eventHandlers.get(name);\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n        subscriptionManager === null || subscriptionManager === void 0 ? void 0 : subscriptionManager.notify.apply(subscriptionManager, args);\n      }\n    }, {\n      key: \"hasListeners\",\n      value: function hasListeners(name) {\n        return this.eventHandlers.has(name);\n      }\n    }, {\n      key: \"registerPotentialNode\",\n      value: function registerPotentialNode(id, node) {\n        this.potentialNodes.set(id, node);\n      }\n      /**\n       * Lifecycles\n       */\n    }, {\n      key: \"mount\",\n      value: function mount(instance) {\n        var _this2 = this;\n        var isLayoutDirty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var _a;\n        if (this.instance) return;\n        this.isSVG = instance instanceof SVGElement && instance.tagName !== \"svg\";\n        this.instance = instance;\n        var _this$options = this.options,\n          layoutId = _this$options.layoutId,\n          layout = _this$options.layout,\n          visualElement = _this$options.visualElement;\n        if (visualElement && !visualElement.current) {\n          visualElement.mount(instance);\n        }\n        this.root.nodes.add(this);\n        (_a = this.parent) === null || _a === void 0 ? void 0 : _a.children.add(this);\n        this.elementId && this.root.potentialNodes.delete(this.elementId);\n        if (isLayoutDirty && (layout || layoutId)) {\n          this.isLayoutDirty = true;\n        }\n        if (attachResizeListener) {\n          var cancelDelay;\n          var resizeUnblockUpdate = function resizeUnblockUpdate() {\n            return _this2.root.updateBlockedByResize = false;\n          };\n          attachResizeListener(instance, function () {\n            _this2.root.updateBlockedByResize = true;\n            cancelDelay && cancelDelay();\n            cancelDelay = delay(resizeUnblockUpdate, 250);\n            if (globalProjectionState.hasAnimatedSinceResize) {\n              globalProjectionState.hasAnimatedSinceResize = false;\n              _this2.nodes.forEach(finishAnimation);\n            }\n          });\n        }\n        if (layoutId) {\n          this.root.registerSharedNode(layoutId, this);\n        }\n        // Only register the handler if it requires layout animation\n        if (this.options.animate !== false && visualElement && (layoutId || layout)) {\n          this.addEventListener(\"didUpdate\", function (_ref2) {\n            var delta = _ref2.delta,\n              hasLayoutChanged = _ref2.hasLayoutChanged,\n              hasRelativeTargetChanged = _ref2.hasRelativeTargetChanged,\n              newLayout = _ref2.layout;\n            var _a, _b, _c, _d, _e;\n            if (_this2.isTreeAnimationBlocked()) {\n              _this2.target = undefined;\n              _this2.relativeTarget = undefined;\n              return;\n            }\n            // TODO: Check here if an animation exists\n            var layoutTransition = (_b = (_a = _this2.options.transition) !== null && _a !== void 0 ? _a : visualElement.getDefaultTransition()) !== null && _b !== void 0 ? _b : defaultLayoutTransition;\n            var _visualElement$getPro = visualElement.getProps(),\n              onLayoutAnimationStart = _visualElement$getPro.onLayoutAnimationStart,\n              onLayoutAnimationComplete = _visualElement$getPro.onLayoutAnimationComplete;\n            /**\n             * The target layout of the element might stay the same,\n             * but its position relative to its parent has changed.\n             */\n            var targetChanged = !_this2.targetLayout || !boxEquals(_this2.targetLayout, newLayout) || hasRelativeTargetChanged;\n            /**\n             * If the layout hasn't seemed to have changed, it might be that the\n             * element is visually in the same place in the document but its position\n             * relative to its parent has indeed changed. So here we check for that.\n             */\n            var hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n            if (((_c = _this2.resumeFrom) === null || _c === void 0 ? void 0 : _c.instance) || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !_this2.currentAnimation)) {\n              if (_this2.resumeFrom) {\n                _this2.resumingFrom = _this2.resumeFrom;\n                _this2.resumingFrom.resumingFrom = undefined;\n              }\n              _this2.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n              var animationOptions = _objectSpread(_objectSpread({}, getValueTransition(layoutTransition, \"layout\")), {}, {\n                onPlay: onLayoutAnimationStart,\n                onComplete: onLayoutAnimationComplete\n              });\n              if (visualElement.shouldReduceMotion) {\n                animationOptions.delay = 0;\n                animationOptions.type = false;\n              }\n              _this2.startAnimation(animationOptions);\n            } else {\n              /**\n               * If the layout hasn't changed and we have an animation that hasn't started yet,\n               * finish it immediately. Otherwise it will be animating from a location\n               * that was probably never commited to screen and look like a jumpy box.\n               */\n              if (!hasLayoutChanged && _this2.animationProgress === 0) {\n                finishAnimation(_this2);\n              }\n              _this2.isLead() && ((_e = (_d = _this2.options).onExitComplete) === null || _e === void 0 ? void 0 : _e.call(_d));\n            }\n            _this2.targetLayout = newLayout;\n          });\n        }\n      }\n    }, {\n      key: \"unmount\",\n      value: function unmount() {\n        var _a, _b;\n        this.options.layoutId && this.willUpdate();\n        this.root.nodes.remove(this);\n        (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.remove(this);\n        (_b = this.parent) === null || _b === void 0 ? void 0 : _b.children.delete(this);\n        this.instance = undefined;\n        cancelSync.preRender(this.updateProjection);\n      }\n      // only on the root\n    }, {\n      key: \"blockUpdate\",\n      value: function blockUpdate() {\n        this.updateManuallyBlocked = true;\n      }\n    }, {\n      key: \"unblockUpdate\",\n      value: function unblockUpdate() {\n        this.updateManuallyBlocked = false;\n      }\n    }, {\n      key: \"isUpdateBlocked\",\n      value: function isUpdateBlocked() {\n        return this.updateManuallyBlocked || this.updateBlockedByResize;\n      }\n    }, {\n      key: \"isTreeAnimationBlocked\",\n      value: function isTreeAnimationBlocked() {\n        var _a;\n        return this.isAnimationBlocked || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimationBlocked()) || false;\n      }\n      // Note: currently only running on root node\n    }, {\n      key: \"startUpdate\",\n      value: function startUpdate() {\n        var _a;\n        if (this.isUpdateBlocked()) return;\n        this.isUpdating = true;\n        (_a = this.nodes) === null || _a === void 0 ? void 0 : _a.forEach(resetRotation);\n      }\n    }, {\n      key: \"willUpdate\",\n      value: function willUpdate() {\n        var shouldNotifyListeners = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        var _a, _b, _c;\n        if (this.root.isUpdateBlocked()) {\n          (_b = (_a = this.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n          return;\n        }\n        !this.root.isUpdating && this.root.startUpdate();\n        if (this.isLayoutDirty) return;\n        this.isLayoutDirty = true;\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          node.shouldResetTransform = true;\n          /**\n           * TODO: Check we haven't updated the scroll\n           * since the last didUpdate\n           */\n          node.updateScroll();\n        }\n        var _this$options2 = this.options,\n          layoutId = _this$options2.layoutId,\n          layout = _this$options2.layout;\n        if (layoutId === undefined && !layout) return;\n        var transformTemplate = (_c = this.options.visualElement) === null || _c === void 0 ? void 0 : _c.getProps().transformTemplate;\n        this.prevTransformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n        this.updateSnapshot();\n        shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n      }\n      // Note: Currently only running on root node\n    }, {\n      key: \"didUpdate\",\n      value: function didUpdate() {\n        var updateWasBlocked = this.isUpdateBlocked();\n        // When doing an instant transition, we skip the layout update,\n        // but should still clean up the measurements so that the next\n        // snapshot could be taken correctly.\n        if (updateWasBlocked) {\n          this.unblockUpdate();\n          this.clearAllSnapshots();\n          this.nodes.forEach(clearMeasurements);\n          return;\n        }\n        if (!this.isUpdating) return;\n        this.isUpdating = false;\n        /**\n         * Search for and mount newly-added projection elements.\n         *\n         * TODO: Every time a new component is rendered we could search up the tree for\n         * the closest mounted node and query from there rather than document.\n         */\n        if (this.potentialNodes.size) {\n          this.potentialNodes.forEach(mountNodeEarly);\n          this.potentialNodes.clear();\n        }\n        /**\n         * Write\n         */\n        this.nodes.forEach(resetTransformStyle);\n        /**\n         * Read ==================\n         */\n        // Update layout measurements of updated children\n        this.nodes.forEach(updateLayout);\n        /**\n         * Write\n         */\n        // Notify listeners that the layout is updated\n        this.nodes.forEach(notifyLayoutUpdate);\n        this.clearAllSnapshots();\n        // Flush any scheduled updates\n        flushSync.update();\n        flushSync.preRender();\n        flushSync.render();\n      }\n    }, {\n      key: \"clearAllSnapshots\",\n      value: function clearAllSnapshots() {\n        this.nodes.forEach(clearSnapshot);\n        this.sharedNodes.forEach(removeLeadSnapshots);\n      }\n    }, {\n      key: \"scheduleUpdateProjection\",\n      value: function scheduleUpdateProjection() {\n        sync.preRender(this.updateProjection, false, true);\n      }\n    }, {\n      key: \"scheduleCheckAfterUnmount\",\n      value: function scheduleCheckAfterUnmount() {\n        var _this3 = this;\n        /**\n         * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n         * we manually call didUpdate to give a chance to the siblings to animate.\n         * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n         */\n        sync.postRender(function () {\n          if (_this3.isLayoutDirty) {\n            _this3.root.didUpdate();\n          } else {\n            _this3.root.checkUpdateFailed();\n          }\n        });\n      }\n      /**\n       * Update measurements\n       */\n    }, {\n      key: \"updateSnapshot\",\n      value: function updateSnapshot() {\n        if (this.snapshot || !this.instance) return;\n        this.snapshot = this.measure();\n      }\n    }, {\n      key: \"updateLayout\",\n      value: function updateLayout() {\n        var _a;\n        if (!this.instance) return;\n        // TODO: Incorporate into a forwarded scroll offset\n        this.updateScroll();\n        if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {\n          return;\n        }\n        /**\n         * When a node is mounted, it simply resumes from the prevLead's\n         * snapshot instead of taking a new one, but the ancestors scroll\n         * might have updated while the prevLead is unmounted. We need to\n         * update the scroll again to make sure the layout we measure is\n         * up to date.\n         */\n        if (this.resumeFrom && !this.resumeFrom.instance) {\n          for (var i = 0; i < this.path.length; i++) {\n            var node = this.path[i];\n            node.updateScroll();\n          }\n        }\n        var prevLayout = this.layout;\n        this.layout = this.measure(false);\n        this.layoutCorrected = createBox();\n        this.isLayoutDirty = false;\n        this.projectionDelta = undefined;\n        this.notifyListeners(\"measure\", this.layout.layoutBox);\n        (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout === null || prevLayout === void 0 ? void 0 : prevLayout.layoutBox);\n      }\n    }, {\n      key: \"updateScroll\",\n      value: function updateScroll() {\n        if (this.options.layoutScroll && this.instance) {\n          this.isScrollRoot = checkIsScrollRoot(this.instance);\n          this.scroll = measureScroll(this.instance);\n        }\n      }\n    }, {\n      key: \"resetTransform\",\n      value: function resetTransform() {\n        var _a;\n        if (!_resetTransform) return;\n        var isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n        var hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n        var transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n        var transformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n        var transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n        if (isResetRequested && (hasProjection || hasTransform(this.latestValues) || transformTemplateHasChanged)) {\n          _resetTransform(this.instance, transformTemplateValue);\n          this.shouldResetTransform = false;\n          this.scheduleRender();\n        }\n      }\n    }, {\n      key: \"measure\",\n      value: function measure() {\n        var removeTransform = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        var pageBox = this.measurePageBox();\n        var layoutBox = this.removeElementScroll(pageBox);\n        /**\n         * Measurements taken during the pre-render stage\n         * still have transforms applied so we remove them\n         * via calculation.\n         */\n        if (removeTransform) {\n          layoutBox = this.removeTransform(layoutBox);\n        }\n        roundBox(layoutBox);\n        return {\n          measuredBox: pageBox,\n          layoutBox: layoutBox,\n          latestValues: {}\n        };\n      }\n    }, {\n      key: \"measurePageBox\",\n      value: function measurePageBox() {\n        var visualElement = this.options.visualElement;\n        if (!visualElement) return createBox();\n        var box = visualElement.measureViewportBox();\n        // Remove viewport scroll to give page-relative coordinates\n        var scroll = this.root.scroll;\n        if (scroll) {\n          translateAxis(box.x, scroll.x);\n          translateAxis(box.y, scroll.y);\n        }\n        return box;\n      }\n    }, {\n      key: \"removeElementScroll\",\n      value: function removeElementScroll(box) {\n        var boxWithoutScroll = createBox();\n        copyBoxInto(boxWithoutScroll, box);\n        /**\n         * Performance TODO: Keep a cumulative scroll offset down the tree\n         * rather than loop back up the path.\n         */\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          var scroll = node.scroll,\n            options = node.options,\n            isScrollRoot = node.isScrollRoot;\n          if (node !== this.root && scroll && options.layoutScroll) {\n            /**\n             * If this is a new scroll root, we want to remove all previous scrolls\n             * from the viewport box.\n             */\n            if (isScrollRoot) {\n              copyBoxInto(boxWithoutScroll, box);\n              var rootScroll = this.root.scroll;\n              /**\n               * Undo the application of page scroll that was originally added\n               * to the measured bounding box.\n               */\n              if (rootScroll) {\n                translateAxis(boxWithoutScroll.x, -rootScroll.x);\n                translateAxis(boxWithoutScroll.y, -rootScroll.y);\n              }\n            }\n            translateAxis(boxWithoutScroll.x, scroll.x);\n            translateAxis(boxWithoutScroll.y, scroll.y);\n          }\n        }\n        return boxWithoutScroll;\n      }\n    }, {\n      key: \"applyTransform\",\n      value: function applyTransform(box) {\n        var transformOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var withTransforms = createBox();\n        copyBoxInto(withTransforms, box);\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          if (!transformOnly && node.options.layoutScroll && node.scroll && node !== node.root) {\n            transformBox(withTransforms, {\n              x: -node.scroll.x,\n              y: -node.scroll.y\n            });\n          }\n          if (!hasTransform(node.latestValues)) continue;\n          transformBox(withTransforms, node.latestValues);\n        }\n        if (hasTransform(this.latestValues)) {\n          transformBox(withTransforms, this.latestValues);\n        }\n        return withTransforms;\n      }\n    }, {\n      key: \"removeTransform\",\n      value: function removeTransform(box) {\n        var _a;\n        var boxWithoutTransform = createBox();\n        copyBoxInto(boxWithoutTransform, box);\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          if (!node.instance) continue;\n          if (!hasTransform(node.latestValues)) continue;\n          hasScale(node.latestValues) && node.updateSnapshot();\n          var sourceBox = createBox();\n          var nodeBox = node.measurePageBox();\n          copyBoxInto(sourceBox, nodeBox);\n          removeBoxTransforms(boxWithoutTransform, node.latestValues, (_a = node.snapshot) === null || _a === void 0 ? void 0 : _a.layoutBox, sourceBox);\n        }\n        if (hasTransform(this.latestValues)) {\n          removeBoxTransforms(boxWithoutTransform, this.latestValues);\n        }\n        return boxWithoutTransform;\n      }\n      /**\n       *\n       */\n    }, {\n      key: \"setTargetDelta\",\n      value: function setTargetDelta(delta) {\n        this.targetDelta = delta;\n        this.root.scheduleUpdateProjection();\n      }\n    }, {\n      key: \"setOptions\",\n      value: function setOptions(options) {\n        this.options = _objectSpread(_objectSpread(_objectSpread({}, this.options), options), {}, {\n          crossfade: options.crossfade !== undefined ? options.crossfade : true\n        });\n      }\n    }, {\n      key: \"clearMeasurements\",\n      value: function clearMeasurements() {\n        this.scroll = undefined;\n        this.layout = undefined;\n        this.snapshot = undefined;\n        this.prevTransformTemplateValue = undefined;\n        this.targetDelta = undefined;\n        this.target = undefined;\n        this.isLayoutDirty = false;\n      }\n      /**\n       * Frame calculations\n       */\n    }, {\n      key: \"resolveTargetDelta\",\n      value: function resolveTargetDelta() {\n        var _a;\n        var _this$options3 = this.options,\n          layout = _this$options3.layout,\n          layoutId = _this$options3.layoutId;\n        /**\n         * If we have no layout, we can't perform projection, so early return\n         */\n        if (!this.layout || !(layout || layoutId)) return;\n        /**\n         * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n         * a relativeParent. This will allow a component to perform scale correction\n         * even if no animation has started.\n         */\n        // TODO If this is unsuccessful this currently happens every frame\n        if (!this.targetDelta && !this.relativeTarget) {\n          // TODO: This is a semi-repetition of further down this function, make DRY\n          var relativeParent = this.getClosestProjectingParent();\n          if (relativeParent && relativeParent.layout) {\n            this.relativeParent = relativeParent;\n            this.relativeTarget = createBox();\n            this.relativeTargetOrigin = createBox();\n            calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n            copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n          } else {\n            this.relativeParent = this.relativeTarget = undefined;\n          }\n        }\n        /**\n         * If we have no relative target or no target delta our target isn't valid\n         * for this frame.\n         */\n        if (!this.relativeTarget && !this.targetDelta) return;\n        /**\n         * Lazy-init target data structure\n         */\n        if (!this.target) {\n          this.target = createBox();\n          this.targetWithTransforms = createBox();\n        }\n        /**\n         * If we've got a relative box for this component, resolve it into a target relative to the parent.\n         */\n        if (this.relativeTarget && this.relativeTargetOrigin && ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.target)) {\n          calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n          /**\n           * If we've only got a targetDelta, resolve it into a target\n           */\n        } else if (this.targetDelta) {\n          if (Boolean(this.resumingFrom)) {\n            // TODO: This is creating a new object every frame\n            this.target = this.applyTransform(this.layout.layoutBox);\n          } else {\n            copyBoxInto(this.target, this.layout.layoutBox);\n          }\n          applyBoxDelta(this.target, this.targetDelta);\n        } else {\n          /**\n           * If no target, use own layout as target\n           */\n          copyBoxInto(this.target, this.layout.layoutBox);\n        }\n        /**\n         * If we've been told to attempt to resolve a relative target, do so.\n         */\n        if (this.attemptToResolveRelativeTarget) {\n          this.attemptToResolveRelativeTarget = false;\n          var _relativeParent = this.getClosestProjectingParent();\n          if (_relativeParent && Boolean(_relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !_relativeParent.options.layoutScroll && _relativeParent.target) {\n            this.relativeParent = _relativeParent;\n            this.relativeTarget = createBox();\n            this.relativeTargetOrigin = createBox();\n            calcRelativePosition(this.relativeTargetOrigin, this.target, _relativeParent.target);\n            copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n          } else {\n            this.relativeParent = this.relativeTarget = undefined;\n          }\n        }\n      }\n    }, {\n      key: \"getClosestProjectingParent\",\n      value: function getClosestProjectingParent() {\n        if (!this.parent || hasScale(this.parent.latestValues) || has2DTranslate(this.parent.latestValues)) return undefined;\n        if ((this.parent.relativeTarget || this.parent.targetDelta) && this.parent.layout) {\n          return this.parent;\n        } else {\n          return this.parent.getClosestProjectingParent();\n        }\n      }\n    }, {\n      key: \"calcProjection\",\n      value: function calcProjection() {\n        var _a;\n        var _this$options4 = this.options,\n          layout = _this$options4.layout,\n          layoutId = _this$options4.layoutId;\n        /**\n         * If this section of the tree isn't animating we can\n         * delete our target sources for the following frame.\n         */\n        this.isTreeAnimating = Boolean(((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimating) || this.currentAnimation || this.pendingAnimation);\n        if (!this.isTreeAnimating) {\n          this.targetDelta = this.relativeTarget = undefined;\n        }\n        if (!this.layout || !(layout || layoutId)) return;\n        var lead = this.getLead();\n        /**\n         * Reset the corrected box with the latest values from box, as we're then going\n         * to perform mutative operations on it.\n         */\n        copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n        /**\n         * Apply all the parent deltas to this box to produce the corrected box. This\n         * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n         */\n        applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, Boolean(this.resumingFrom) || this !== lead);\n        var target = lead.target;\n        if (!target) return;\n        if (!this.projectionDelta) {\n          this.projectionDelta = createDelta();\n          this.projectionDeltaWithTransform = createDelta();\n        }\n        var prevTreeScaleX = this.treeScale.x;\n        var prevTreeScaleY = this.treeScale.y;\n        var prevProjectionTransform = this.projectionTransform;\n        /**\n         * Update the delta between the corrected box and the target box before user-set transforms were applied.\n         * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n         * for our layout reprojection, but still allow them to be scaled correctly by the user.\n         * It might be that to simplify this we may want to accept that user-set scale is also corrected\n         * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n         * to allow people to choose whether these styles are corrected based on just the\n         * layout reprojection or the final bounding box.\n         */\n        calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n        this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n        if (this.projectionTransform !== prevProjectionTransform || this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY) {\n          this.hasProjected = true;\n          this.scheduleRender();\n          this.notifyListeners(\"projectionUpdate\", target);\n        }\n      }\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        this.isVisible = false;\n        // TODO: Schedule render\n      }\n    }, {\n      key: \"show\",\n      value: function show() {\n        this.isVisible = true;\n        // TODO: Schedule render\n      }\n    }, {\n      key: \"scheduleRender\",\n      value: function scheduleRender() {\n        var notifyAll = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        var _a, _b, _c;\n        (_b = (_a = this.options).scheduleRender) === null || _b === void 0 ? void 0 : _b.call(_a);\n        notifyAll && ((_c = this.getStack()) === null || _c === void 0 ? void 0 : _c.scheduleRender());\n        if (this.resumingFrom && !this.resumingFrom.instance) {\n          this.resumingFrom = undefined;\n        }\n      }\n    }, {\n      key: \"setAnimationOrigin\",\n      value: function setAnimationOrigin(delta) {\n        var _this4 = this;\n        var hasOnlyRelativeTargetChanged = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var _a;\n        var snapshot = this.snapshot;\n        var snapshotLatestValues = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.latestValues) || {};\n        var mixedValues = _objectSpread({}, this.latestValues);\n        var targetDelta = createDelta();\n        this.relativeTarget = this.relativeTargetOrigin = undefined;\n        this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n        var relativeLayout = createBox();\n        var isSharedLayoutAnimation = snapshot === null || snapshot === void 0 ? void 0 : snapshot.isShared;\n        var isOnlyMember = (((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.members.length) || 0) <= 1;\n        var shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));\n        this.animationProgress = 0;\n        this.mixTargetDelta = function (latest) {\n          var _a;\n          var progress = latest / 1000;\n          mixAxisDelta(targetDelta.x, delta.x, progress);\n          mixAxisDelta(targetDelta.y, delta.y, progress);\n          _this4.setTargetDelta(targetDelta);\n          if (_this4.relativeTarget && _this4.relativeTargetOrigin && _this4.layout && ((_a = _this4.relativeParent) === null || _a === void 0 ? void 0 : _a.layout)) {\n            calcRelativePosition(relativeLayout, _this4.layout.layoutBox, _this4.relativeParent.layout.layoutBox);\n            mixBox(_this4.relativeTarget, _this4.relativeTargetOrigin, relativeLayout, progress);\n          }\n          if (isSharedLayoutAnimation) {\n            _this4.animationValues = mixedValues;\n            mixValues(mixedValues, snapshotLatestValues, _this4.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n          }\n          _this4.root.scheduleUpdateProjection();\n          _this4.scheduleRender();\n          _this4.animationProgress = progress;\n        };\n        this.mixTargetDelta(0);\n      }\n    }, {\n      key: \"startAnimation\",\n      value: function startAnimation(options) {\n        var _this5 = this;\n        var _a, _b;\n        this.notifyListeners(\"animationStart\");\n        (_a = this.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n        if (this.resumingFrom) {\n          (_b = this.resumingFrom.currentAnimation) === null || _b === void 0 ? void 0 : _b.stop();\n        }\n        if (this.pendingAnimation) {\n          cancelSync.update(this.pendingAnimation);\n          this.pendingAnimation = undefined;\n        }\n        /**\n         * Start the animation in the next frame to have a frame with progress 0,\n         * where the target is the same as when the animation started, so we can\n         * calculate the relative positions correctly for instant transitions.\n         */\n        this.pendingAnimation = sync.update(function () {\n          globalProjectionState.hasAnimatedSinceResize = true;\n          _this5.currentAnimation = animate(0, animationTarget, _objectSpread(_objectSpread({}, options), {}, {\n            onUpdate: function onUpdate(latest) {\n              var _a;\n              _this5.mixTargetDelta(latest);\n              (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, latest);\n            },\n            onComplete: function onComplete() {\n              var _a;\n              (_a = options.onComplete) === null || _a === void 0 ? void 0 : _a.call(options);\n              _this5.completeAnimation();\n            }\n          }));\n          if (_this5.resumingFrom) {\n            _this5.resumingFrom.currentAnimation = _this5.currentAnimation;\n          }\n          _this5.pendingAnimation = undefined;\n        });\n      }\n    }, {\n      key: \"completeAnimation\",\n      value: function completeAnimation() {\n        var _a;\n        if (this.resumingFrom) {\n          this.resumingFrom.currentAnimation = undefined;\n          this.resumingFrom.preserveOpacity = undefined;\n        }\n        (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.exitAnimationComplete();\n        this.resumingFrom = this.currentAnimation = this.animationValues = undefined;\n        this.notifyListeners(\"animationComplete\");\n      }\n    }, {\n      key: \"finishAnimation\",\n      value: function finishAnimation() {\n        var _a;\n        if (this.currentAnimation) {\n          (_a = this.mixTargetDelta) === null || _a === void 0 ? void 0 : _a.call(this, animationTarget);\n          this.currentAnimation.stop();\n        }\n        this.completeAnimation();\n      }\n    }, {\n      key: \"applyTransformsToTarget\",\n      value: function applyTransformsToTarget() {\n        var lead = this.getLead();\n        var targetWithTransforms = lead.targetWithTransforms,\n          target = lead.target,\n          layout = lead.layout,\n          latestValues = lead.latestValues;\n        if (!targetWithTransforms || !target || !layout) return;\n        /**\n         * If we're only animating position, and this element isn't the lead element,\n         * then instead of projecting into the lead box we instead want to calculate\n         * a new target that aligns the two boxes but maintains the layout shape.\n         */\n        if (this !== lead && this.layout && layout && shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n          target = this.target || createBox();\n          var xLength = calcLength(this.layout.layoutBox.x);\n          target.x.min = lead.target.x.min;\n          target.x.max = target.x.min + xLength;\n          var yLength = calcLength(this.layout.layoutBox.y);\n          target.y.min = lead.target.y.min;\n          target.y.max = target.y.min + yLength;\n        }\n        copyBoxInto(targetWithTransforms, target);\n        /**\n         * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n         * This is the final box that we will then project into by calculating a transform delta and\n         * applying it to the corrected box.\n         */\n        transformBox(targetWithTransforms, latestValues);\n        /**\n         * Update the delta between the corrected box and the final target box, after\n         * user-set transforms are applied to it. This will be used by the renderer to\n         * create a transform style that will reproject the element from its layout layout\n         * into the desired bounding box.\n         */\n        calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n      }\n    }, {\n      key: \"registerSharedNode\",\n      value: function registerSharedNode(layoutId, node) {\n        var _a, _b, _c;\n        if (!this.sharedNodes.has(layoutId)) {\n          this.sharedNodes.set(layoutId, new NodeStack());\n        }\n        var stack = this.sharedNodes.get(layoutId);\n        stack.add(node);\n        node.promote({\n          transition: (_a = node.options.initialPromotionConfig) === null || _a === void 0 ? void 0 : _a.transition,\n          preserveFollowOpacity: (_c = (_b = node.options.initialPromotionConfig) === null || _b === void 0 ? void 0 : _b.shouldPreserveFollowOpacity) === null || _c === void 0 ? void 0 : _c.call(_b, node)\n        });\n      }\n    }, {\n      key: \"isLead\",\n      value: function isLead() {\n        var stack = this.getStack();\n        return stack ? stack.lead === this : true;\n      }\n    }, {\n      key: \"getLead\",\n      value: function getLead() {\n        var _a;\n        var layoutId = this.options.layoutId;\n        return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n      }\n    }, {\n      key: \"getPrevLead\",\n      value: function getPrevLead() {\n        var _a;\n        var layoutId = this.options.layoutId;\n        return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n      }\n    }, {\n      key: \"getStack\",\n      value: function getStack() {\n        var layoutId = this.options.layoutId;\n        if (layoutId) return this.root.sharedNodes.get(layoutId);\n      }\n    }, {\n      key: \"promote\",\n      value: function promote() {\n        var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          needsReset = _ref3.needsReset,\n          transition = _ref3.transition,\n          preserveFollowOpacity = _ref3.preserveFollowOpacity;\n        var stack = this.getStack();\n        if (stack) stack.promote(this, preserveFollowOpacity);\n        if (needsReset) {\n          this.projectionDelta = undefined;\n          this.needsReset = true;\n        }\n        if (transition) this.setOptions({\n          transition: transition\n        });\n      }\n    }, {\n      key: \"relegate\",\n      value: function relegate() {\n        var stack = this.getStack();\n        if (stack) {\n          return stack.relegate(this);\n        } else {\n          return false;\n        }\n      }\n    }, {\n      key: \"resetRotation\",\n      value: function resetRotation() {\n        var visualElement = this.options.visualElement;\n        if (!visualElement) return;\n        // If there's no detected rotation values, we can early return without a forced render.\n        var hasRotate = false;\n        // Keep a record of all the values we've reset\n        var resetValues = {};\n        // Check the rotate value of all axes and reset to 0\n        for (var i = 0; i < transformAxes.length; i++) {\n          var axis = transformAxes[i];\n          var key = \"rotate\" + axis;\n          // If this rotation doesn't exist as a motion value, then we don't\n          // need to reset it\n          if (!visualElement.getStaticValue(key)) {\n            continue;\n          }\n          hasRotate = true;\n          // Record the rotation and then temporarily set it to 0\n          resetValues[key] = visualElement.getStaticValue(key);\n          visualElement.setStaticValue(key, 0);\n        }\n        // If there's no rotation values, we don't need to do any more.\n        if (!hasRotate) return;\n        // Force a render of this element to apply the transform with all rotations\n        // set to 0.\n        visualElement === null || visualElement === void 0 ? void 0 : visualElement.render();\n        // Put back all the values we reset\n        for (var _key2 in resetValues) {\n          visualElement.setStaticValue(_key2, resetValues[_key2]);\n        }\n        // Schedule a render for the next frame. This ensures we won't visually\n        // see the element with the reset rotate value applied.\n        visualElement.scheduleRender();\n      }\n    }, {\n      key: \"getProjectionStyles\",\n      value: function getProjectionStyles() {\n        var styleProp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var _a, _b, _c;\n        // TODO: Return lifecycle-persistent object\n        var styles = {};\n        if (!this.instance || this.isSVG) return styles;\n        if (!this.isVisible) {\n          return {\n            visibility: \"hidden\"\n          };\n        } else {\n          styles.visibility = \"\";\n        }\n        var transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n        if (this.needsReset) {\n          this.needsReset = false;\n          styles.opacity = \"\";\n          styles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || \"\";\n          styles.transform = transformTemplate ? transformTemplate(this.latestValues, \"\") : \"none\";\n          return styles;\n        }\n        var lead = this.getLead();\n        if (!this.projectionDelta || !this.layout || !lead.target) {\n          var emptyStyles = {};\n          if (this.options.layoutId) {\n            emptyStyles.opacity = this.latestValues.opacity !== undefined ? this.latestValues.opacity : 1;\n            emptyStyles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || \"\";\n          }\n          if (this.hasProjected && !hasTransform(this.latestValues)) {\n            emptyStyles.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n            this.hasProjected = false;\n          }\n          return emptyStyles;\n        }\n        var valuesToRender = lead.animationValues || lead.latestValues;\n        this.applyTransformsToTarget();\n        styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n        if (transformTemplate) {\n          styles.transform = transformTemplate(valuesToRender, styles.transform);\n        }\n        var _this$projectionDelta = this.projectionDelta,\n          x = _this$projectionDelta.x,\n          y = _this$projectionDelta.y;\n        styles.transformOrigin = \"\".concat(x.origin * 100, \"% \").concat(y.origin * 100, \"% 0\");\n        if (lead.animationValues) {\n          /**\n           * If the lead component is animating, assign this either the entering/leaving\n           * opacity\n           */\n          styles.opacity = lead === this ? (_c = (_b = valuesToRender.opacity) !== null && _b !== void 0 ? _b : this.latestValues.opacity) !== null && _c !== void 0 ? _c : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;\n        } else {\n          /**\n           * Or we're not animating at all, set the lead component to its layout\n           * opacity and other components to hidden.\n           */\n          styles.opacity = lead === this ? valuesToRender.opacity !== undefined ? valuesToRender.opacity : \"\" : valuesToRender.opacityExit !== undefined ? valuesToRender.opacityExit : 0;\n        }\n        /**\n         * Apply scale correction\n         */\n        for (var key in scaleCorrectors) {\n          if (valuesToRender[key] === undefined) continue;\n          var _scaleCorrectors$key = scaleCorrectors[key],\n            correct = _scaleCorrectors$key.correct,\n            applyTo = _scaleCorrectors$key.applyTo;\n          var corrected = correct(valuesToRender[key], lead);\n          if (applyTo) {\n            var num = applyTo.length;\n            for (var i = 0; i < num; i++) {\n              styles[applyTo[i]] = corrected;\n            }\n          } else {\n            styles[key] = corrected;\n          }\n        }\n        /**\n         * Disable pointer events on follow components. This is to ensure\n         * that if a follow component covers a lead component it doesn't block\n         * pointer events on the lead.\n         */\n        if (this.options.layoutId) {\n          styles.pointerEvents = lead === this ? resolveMotionValue(styleProp.pointerEvents) || \"\" : \"none\";\n        }\n        return styles;\n      }\n    }, {\n      key: \"clearSnapshot\",\n      value: function clearSnapshot() {\n        this.resumeFrom = this.snapshot = undefined;\n      }\n      // Only run on root\n    }, {\n      key: \"resetTree\",\n      value: function resetTree() {\n        this.root.nodes.forEach(function (node) {\n          var _a;\n          return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n        });\n        this.root.nodes.forEach(clearMeasurements);\n        this.root.sharedNodes.clear();\n      }\n    }]);\n    return ProjectionNode;\n  }();\n}\nfunction updateLayout(node) {\n  node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n  var _a, _b, _c;\n  var snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n  if (node.isLead() && node.layout && snapshot && node.hasListeners(\"didUpdate\")) {\n    var _node$layout = node.layout,\n      layout = _node$layout.layoutBox,\n      measuredLayout = _node$layout.measuredBox;\n    var animationType = node.options.animationType;\n    // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n    // animations for instance if layout=\"size\" and an element has only changed position\n    if (animationType === \"size\") {\n      eachAxis(function (axis) {\n        var axisSnapshot = snapshot.isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];\n        var length = calcLength(axisSnapshot);\n        axisSnapshot.min = layout[axis].min;\n        axisSnapshot.max = axisSnapshot.min + length;\n      });\n    } else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n      eachAxis(function (axis) {\n        var axisSnapshot = snapshot.isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];\n        var length = calcLength(layout[axis]);\n        axisSnapshot.max = axisSnapshot.min + length;\n      });\n    }\n    var layoutDelta = createDelta();\n    calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n    var visualDelta = createDelta();\n    if (snapshot.isShared) {\n      calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n    } else {\n      calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n    }\n    var hasLayoutChanged = !isDeltaZero(layoutDelta);\n    var hasRelativeTargetChanged = false;\n    if (!node.resumeFrom) {\n      var relativeParent = node.getClosestProjectingParent();\n      /**\n       * If the relativeParent is itself resuming from a different element then\n       * the relative snapshot is not relavent\n       */\n      if (relativeParent && !relativeParent.resumeFrom) {\n        var parentSnapshot = relativeParent.snapshot,\n          parentLayout = relativeParent.layout;\n        if (parentSnapshot && parentLayout) {\n          var relativeSnapshot = createBox();\n          calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n          var relativeLayout = createBox();\n          calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n          if (!boxEquals(relativeSnapshot, relativeLayout)) {\n            hasRelativeTargetChanged = true;\n          }\n        }\n      }\n    }\n    node.notifyListeners(\"didUpdate\", {\n      layout: layout,\n      snapshot: snapshot,\n      delta: visualDelta,\n      layoutDelta: layoutDelta,\n      hasLayoutChanged: hasLayoutChanged,\n      hasRelativeTargetChanged: hasRelativeTargetChanged\n    });\n  } else if (node.isLead()) {\n    (_c = (_b = node.options).onExitComplete) === null || _c === void 0 ? void 0 : _c.call(_b);\n  }\n  /**\n   * Clearing transition\n   * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n   * and why we need it at all\n   */\n  node.options.transition = undefined;\n}\nfunction clearSnapshot(node) {\n  node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n  node.clearMeasurements();\n}\nfunction resetTransformStyle(node) {\n  var visualElement = node.options.visualElement;\n  if (visualElement === null || visualElement === void 0 ? void 0 : visualElement.getProps().onBeforeLayoutMeasure) {\n    visualElement.notify(\"BeforeLayoutMeasure\");\n  }\n  node.resetTransform();\n}\nfunction finishAnimation(node) {\n  node.finishAnimation();\n  node.targetDelta = node.relativeTarget = node.target = undefined;\n}\nfunction resolveTargetDelta(node) {\n  node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n  node.calcProjection();\n}\nfunction resetRotation(node) {\n  node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n  stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n  output.translate = mix(delta.translate, 0, p);\n  output.scale = mix(delta.scale, 1, p);\n  output.origin = delta.origin;\n  output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n  output.min = mix(from.min, to.min, p);\n  output.max = mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n  mixAxis(output.x, from.x, to.x, p);\n  mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n  return node.animationValues && node.animationValues.opacityExit !== undefined;\n}\nvar defaultLayoutTransition = {\n  duration: 0.45,\n  ease: [0.4, 0, 0.1, 1]\n};\nfunction mountNodeEarly(node, id) {\n  /**\n   * Rather than searching the DOM from document we can search the\n   * path for the deepest mounted ancestor and search from there\n   */\n  var searchNode = node.root;\n  for (var i = node.path.length - 1; i >= 0; i--) {\n    if (Boolean(node.path[i].instance)) {\n      searchNode = node.path[i];\n      break;\n    }\n  }\n  var searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n  var element = searchElement.querySelector(\"[data-projection-id=\\\"\".concat(id, \"\\\"]\"));\n  if (element) node.mount(element, true);\n}\nfunction roundAxis(axis) {\n  axis.min = Math.round(axis.min);\n  axis.max = Math.round(axis.max);\n}\nfunction roundBox(box) {\n  roundAxis(box.x);\n  roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n  return animationType === \"position\" || animationType === \"preserve-aspect\" && !isCloseTo(aspectRatio(snapshot), aspectRatio(layout), 0.2);\n}\nexport { createProjectionNode, mixAxis, mixAxisDelta, mixBox };","map":{"version":3,"names":["sync","cancelSync","flushSync","mix","animate","SubscriptionManager","mixValues","copyBoxInto","translateAxis","transformBox","applyBoxDelta","applyTreeDeltas","calcRelativePosition","calcRelativeBox","calcBoxDelta","calcLength","removeBoxTransforms","createBox","createDelta","getValueTransition","boxEquals","isDeltaZero","isCloseTo","aspectRatio","NodeStack","scaleCorrectors","buildProjectionTransform","eachAxis","hasTransform","hasScale","has2DTranslate","FlatTree","resolveMotionValue","globalProjectionState","delay","transformAxes","animationTarget","createProjectionNode","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","elementId","latestValues","parent","children","Set","options","isTreeAnimating","isAnimationBlocked","isLayoutDirty","updateManuallyBlocked","updateBlockedByResize","isUpdating","isSVG","needsReset","shouldResetTransform","treeScale","x","y","eventHandlers","Map","potentialNodes","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","forEach","resolveTargetDelta","calcProjection","hasProjected","isVisible","animationProgress","sharedNodes","root","path","depth","registerPotentialNode","i","length","name","handler","has","set","get","add","subscriptionManager","args","notify","id","node","instance","_a","SVGElement","tagName","layoutId","layout","visualElement","current","mount","delete","cancelDelay","resizeUnblockUpdate","hasAnimatedSinceResize","finishAnimation","registerSharedNode","addEventListener","delta","hasLayoutChanged","hasRelativeTargetChanged","newLayout","_b","_c","_d","_e","isTreeAnimationBlocked","target","undefined","relativeTarget","layoutTransition","transition","getDefaultTransition","defaultLayoutTransition","getProps","onLayoutAnimationStart","onLayoutAnimationComplete","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","resumeFrom","currentAnimation","resumingFrom","setAnimationOrigin","animationOptions","onPlay","onComplete","shouldReduceMotion","type","startAnimation","isLead","onExitComplete","call","willUpdate","remove","getStack","preRender","isUpdateBlocked","resetRotation","shouldNotifyListeners","startUpdate","updateScroll","transformTemplate","prevTransformTemplateValue","updateSnapshot","notifyListeners","updateWasBlocked","unblockUpdate","clearMeasurements","size","mountNodeEarly","clear","resetTransformStyle","updateLayout","notifyLayoutUpdate","update","render","clearSnapshot","removeLeadSnapshots","postRender","didUpdate","snapshot","measure","alwaysMeasureLayout","prevLayout","layoutCorrected","projectionDelta","layoutBox","layoutScroll","isScrollRoot","scroll","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","scheduleRender","removeTransform","pageBox","measurePageBox","removeElementScroll","roundBox","measuredBox","box","measureViewportBox","boxWithoutScroll","rootScroll","transformOnly","withTransforms","boxWithoutTransform","sourceBox","nodeBox","targetDelta","scheduleUpdateProjection","crossfade","relativeParent","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","Boolean","applyTransform","attemptToResolveRelativeTarget","pendingAnimation","lead","getLead","projectionDeltaWithTransform","prevTreeScaleX","prevTreeScaleY","prevProjectionTransform","projectionTransform","notifyAll","snapshotLatestValues","mixedValues","relativeLayout","isSharedLayoutAnimation","isShared","isOnlyMember","members","shouldCrossfadeOpacity","some","hasOpacityCrossfade","mixTargetDelta","latest","progress","mixAxisDelta","setTargetDelta","mixBox","animationValues","stop","onUpdate","completeAnimation","preserveOpacity","exitAnimationComplete","shouldAnimatePositionOnly","animationType","xLength","min","max","yLength","stack","promote","initialPromotionConfig","preserveFollowOpacity","shouldPreserveFollowOpacity","prevLead","setOptions","relegate","hasRotate","resetValues","axis","key","getStaticValue","setStaticValue","styleProp","styles","visibility","opacity","pointerEvents","transform","emptyStyles","valuesToRender","applyTransformsToTarget","transformOrigin","origin","opacityExit","correct","applyTo","corrected","num","hasListeners","measuredLayout","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","removeLeadSnapshot","output","p","translate","scale","originPoint","mixAxis","from","to","duration","ease","searchNode","searchElement","document","element","querySelector","roundAxis","Math","round"],"sources":["/Users/ryes/Downloads/Files etc/React WS/node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs"],"sourcesContent":["import sync, { cancelSync, flushSync } from 'framesync';\nimport { mix } from 'popmotion';\nimport { animate } from '../../animation/animate.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEquals, isDeltaZero, isCloseTo, aspectRatio } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\n\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(elementId, latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            // Note: Currently only running on root node\n            this.potentialNodes = new Map();\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            this.updateProjection = () => {\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.elementId = elementId;\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            elementId && this.root.registerPotentialNode(elementId, this);\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager === null || subscriptionManager === void 0 ? void 0 : subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        registerPotentialNode(id, node) {\n            this.potentialNodes.set(id, node);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance, isLayoutDirty = false) {\n            var _a;\n            if (this.instance)\n                return;\n            this.isSVG =\n                instance instanceof SVGElement && instance.tagName !== \"svg\";\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            (_a = this.parent) === null || _a === void 0 ? void 0 : _a.children.add(this);\n            this.elementId && this.root.potentialNodes.delete(this.elementId);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {\n                    var _a, _b, _c, _d, _e;\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = (_b = (_a = this.options.transition) !== null && _a !== void 0 ? _a : visualElement.getDefaultTransition()) !== null && _b !== void 0 ? _b : defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const targetChanged = !this.targetLayout ||\n                        !boxEquals(this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (((_c = this.resumeFrom) === null || _c === void 0 ? void 0 : _c.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged &&\n                            this.animationProgress === 0) {\n                            finishAnimation(this);\n                        }\n                        this.isLead() && ((_e = (_d = this.options).onExitComplete) === null || _e === void 0 ? void 0 : _e.call(_d));\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            var _a, _b;\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.remove(this);\n            (_b = this.parent) === null || _b === void 0 ? void 0 : _b.children.delete(this);\n            this.instance = undefined;\n            cancelSync.preRender(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            var _a;\n            return (this.isAnimationBlocked ||\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            var _a;\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            (_a = this.nodes) === null || _a === void 0 ? void 0 : _a.forEach(resetRotation);\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            var _a, _b, _c;\n            if (this.root.isUpdateBlocked()) {\n                (_b = (_a = this.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n                return;\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                /**\n                 * TODO: Check we haven't updated the scroll\n                 * since the last didUpdate\n                 */\n                node.updateScroll();\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = (_c = this.options.visualElement) === null || _c === void 0 ? void 0 : _c.getProps().transformTemplate;\n            this.prevTransformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        // Note: Currently only running on root node\n        didUpdate() {\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating)\n                return;\n            this.isUpdating = false;\n            /**\n             * Search for and mount newly-added projection elements.\n             *\n             * TODO: Every time a new component is rendered we could search up the tree for\n             * the closest mounted node and query from there rather than document.\n             */\n            if (this.potentialNodes.size) {\n                this.potentialNodes.forEach(mountNodeEarly);\n                this.potentialNodes.clear();\n            }\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            // Flush any scheduled updates\n            flushSync.update();\n            flushSync.preRender();\n            flushSync.render();\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            sync.preRender(this.updateProjection, false, true);\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            sync.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n        }\n        updateLayout() {\n            var _a;\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout === null || prevLayout === void 0 ? void 0 : prevLayout.layoutBox);\n        }\n        updateScroll() {\n            if (this.options.layoutScroll && this.instance) {\n                this.isScrollRoot = checkIsScrollRoot(this.instance);\n                this.scroll = measureScroll(this.instance);\n            }\n        }\n        resetTransform() {\n            var _a;\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n            const transformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n            };\n        }\n        measurePageBox() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            const { scroll } = this.root;\n            if (scroll) {\n                translateAxis(box.x, scroll.x);\n                translateAxis(box.y, scroll.y);\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options, isScrollRoot } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (isScrollRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                        const { scroll: rootScroll } = this.root;\n                        /**\n                         * Undo the application of page scroll that was originally added\n                         * to the measured bounding box.\n                         */\n                        if (rootScroll) {\n                            translateAxis(boxWithoutScroll.x, -rootScroll.x);\n                            translateAxis(boxWithoutScroll.y, -rootScroll.y);\n                        }\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.x);\n                    translateAxis(boxWithoutScroll.y, scroll.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.x,\n                        y: -node.scroll.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            var _a;\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, (_a = node.snapshot) === null || _a === void 0 ? void 0 : _a.layoutBox, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        /**\n         *\n         */\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        /**\n         * Frame calculations\n         */\n        resolveTargetDelta() {\n            var _a;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            // TODO If this is unsuccessful this currently happens every frame\n            if (!this.targetDelta && !this.relativeTarget) {\n                // TODO: This is a semi-repetition of further down this function, make DRY\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent && relativeParent.layout) {\n                    this.relativeParent = relativeParent;\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.target)) {\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target) {\n                    this.relativeParent = relativeParent;\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues))\n                return undefined;\n            if ((this.parent.relativeTarget || this.parent.targetDelta) &&\n                this.parent.layout) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        calcProjection() {\n            var _a;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean(((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            const lead = this.getLead();\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, Boolean(this.resumingFrom) || this !== lead);\n            const { target } = lead;\n            if (!target)\n                return;\n            if (!this.projectionDelta) {\n                this.projectionDelta = createDelta();\n                this.projectionDeltaWithTransform = createDelta();\n            }\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            const prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform ||\n                this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            var _a, _b, _c;\n            (_b = (_a = this.options).scheduleRender) === null || _b === void 0 ? void 0 : _b.call(_a);\n            notifyAll && ((_c = this.getStack()) === null || _c === void 0 ? void 0 : _c.scheduleRender());\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            var _a;\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.latestValues) || {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            this.relativeTarget = this.relativeTargetOrigin = undefined;\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const isSharedLayoutAnimation = snapshot === null || snapshot === void 0 ? void 0 : snapshot.isShared;\n            const isOnlyMember = (((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.members.length) || 0) <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            this.mixTargetDelta = (latest) => {\n                var _a;\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.layout)) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(0);\n        }\n        startAnimation(options) {\n            var _a, _b;\n            this.notifyListeners(\"animationStart\");\n            (_a = this.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n            if (this.resumingFrom) {\n                (_b = this.resumingFrom.currentAnimation) === null || _b === void 0 ? void 0 : _b.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelSync.update(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = sync.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = animate(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest) => {\n                        var _a;\n                        this.mixTargetDelta(latest);\n                        (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, latest);\n                    },\n                    onComplete: () => {\n                        var _a;\n                        (_a = options.onComplete) === null || _a === void 0 ? void 0 : _a.call(options);\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            var _a;\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            var _a;\n            if (this.currentAnimation) {\n                (_a = this.mixTargetDelta) === null || _a === void 0 ? void 0 : _a.call(this, animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            var _a, _b, _c;\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            node.promote({\n                transition: (_a = node.options.initialPromotionConfig) === null || _a === void 0 ? void 0 : _a.transition,\n                preserveFollowOpacity: (_c = (_b = node.options.initialPromotionConfig) === null || _b === void 0 ? void 0 : _b.shouldPreserveFollowOpacity) === null || _c === void 0 ? void 0 : _c.call(_b, node),\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected rotation values, we can early return without a forced render.\n            let hasRotate = false;\n            // Keep a record of all the values we've reset\n            const resetValues = {};\n            // Check the rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                const axis = transformAxes[i];\n                const key = \"rotate\" + axis;\n                // If this rotation doesn't exist as a motion value, then we don't\n                // need to reset it\n                if (!visualElement.getStaticValue(key)) {\n                    continue;\n                }\n                hasRotate = true;\n                // Record the rotation and then temporarily set it to 0\n                resetValues[key] = visualElement.getStaticValue(key);\n                visualElement.setStaticValue(key, 0);\n            }\n            // If there's no rotation values, we don't need to do any more.\n            if (!hasRotate)\n                return;\n            // Force a render of this element to apply the transform with all rotations\n            // set to 0.\n            visualElement === null || visualElement === void 0 ? void 0 : visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp = {}) {\n            var _a, _b, _c;\n            // TODO: Return lifecycle-persistent object\n            const styles = {};\n            if (!this.instance || this.isSVG)\n                return styles;\n            if (!this.isVisible) {\n                return { visibility: \"hidden\" };\n            }\n            else {\n                styles.visibility = \"\";\n            }\n            const transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_c = (_b = valuesToRender.opacity) !== null && _b !== void 0 ? _b : this.latestValues.opacity) !== null && _c !== void 0 ? _c : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo } = scaleCorrectors[key];\n                const corrected = correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a, _b, _c;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = snapshot.isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = snapshot.isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (snapshot.isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEquals(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        (_c = (_b = node.options).onExitComplete) === null || _c === void 0 ? void 0 : _c.call(_b);\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement === null || visualElement === void 0 ? void 0 : visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetRotation(node) {\n    node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mix(delta.translate, 0, p);\n    output.scale = mix(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mix(from.min, to.min, p);\n    output.max = mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nfunction mountNodeEarly(node, id) {\n    /**\n     * Rather than searching the DOM from document we can search the\n     * path for the deepest mounted ancestor and search from there\n     */\n    let searchNode = node.root;\n    for (let i = node.path.length - 1; i >= 0; i--) {\n        if (Boolean(node.path[i].instance)) {\n            searchNode = node.path[i];\n            break;\n        }\n    }\n    const searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n    const element = searchElement.querySelector(`[data-projection-id=\"${id}\"]`);\n    if (element)\n        node.mount(element, true);\n}\nfunction roundAxis(axis) {\n    axis.min = Math.round(axis.min);\n    axis.max = Math.round(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isCloseTo(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\n\nexport { createProjectionNode, mixAxis, mixAxisDelta, mixBox };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}